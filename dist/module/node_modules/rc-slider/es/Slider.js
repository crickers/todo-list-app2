import"/node_modules/core-js/modules/es.array.reverse.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import _classCallCheck from"/node_modules/@babel/runtime/helpers/esm/classCallCheck.js";import _createClass from"/node_modules/@babel/runtime/helpers/esm/createClass.js";import _inherits from"/node_modules/@babel/runtime/helpers/esm/inherits.js";import _createSuper from"/node_modules/@babel/runtime/helpers/esm/createSuper.js";import React from"c:\\node_modules\\react\\index.js";import warning from"/node_modules/rc-util/es/warning.js";import Track from"/node_modules/rc-slider/es/common/Track.js";import createSlider from"/node_modules/rc-slider/es/common/createSlider.js";import*as _ref from"/node_modules/rc-slider/es/utils.js";const utils=1===Object.keys(_ref).length&&_ref.default?_ref.default:_ref;var Slider=function(_React$Component){function Slider(props){var _this;_classCallCheck(this,Slider),_this=_super.call(this,props),_this.positionGetValue=function(position){return[]},_this.onEnd=function(force){var dragging=_this.state.dragging;_this.removeDocumentEvents(),(dragging||force)&&_this.props.onAfterChange(_this.getValue()),_this.setState({dragging:!1})};var defaultValue=void 0===props.defaultValue?props.min:props.defaultValue,value=void 0===props.value?defaultValue:props.value;return _this.state={value:_this.trimAlignValue(value),dragging:!1},warning(!("minimumTrackStyle"in props),"minimumTrackStyle will be deprecated, please use trackStyle instead."),warning(!("maximumTrackStyle"in props),"maximumTrackStyle will be deprecated, please use railStyle instead."),_this}_inherits(Slider,_React$Component);var _super=_createSuper(Slider);return _createClass(Slider,[{key:"calcValueByPos",value:function calcValueByPos(value){return 0}},{key:"calcOffset",value:function calcOffset(value){return 0}},{key:"saveHandle",value:function saveHandle(index,h){}},{key:"removeDocumentEvents",value:function removeDocumentEvents(){}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps,prevState){var _this$props=this.props,min=_this$props.min,max=_this$props.max,value=_this$props.value,onChange=_this$props.onChange;if("min"in this.props||"max"in this.props){var theValue=void 0===value?prevState.value:value,nextValue=this.trimAlignValue(theValue,this.props);nextValue===prevState.value||(this.setState({value:nextValue}),(min!==prevProps.min||max!==prevProps.max)&&utils.isValueOutOfRange(theValue,this.props)&&onChange(nextValue))}}},{key:"onChange",value:function onChange(state){var props=this.props,isNotControlled=!("value"in props),nextState=state.value>this.props.max?_objectSpread(_objectSpread({},state),{},{value:this.props.max}):state;isNotControlled&&this.setState(nextState);var changedValue=nextState.value;props.onChange(changedValue)}},{key:"onStart",value:function onStart(position){this.setState({dragging:!0});var props=this.props,prevValue=this.getValue();props.onBeforeChange(prevValue);var value=this.calcValueByPos(position);this.startValue=value,this.startPosition=position,value===prevValue||(this.prevMovedHandleIndex=0,this.onChange({value:value}))}},{key:"onMove",value:function onMove(e,position){utils.pauseEvent(e);var oldValue=this.state.value,value=this.calcValueByPos(position);value===oldValue||this.onChange({value:value})}},{key:"onKeyboard",value:function onKeyboard(e){var _this$props2=this.props,reverse=_this$props2.reverse,vertical=_this$props2.vertical,valueMutator=utils.getKeyboardValueMutator(e,vertical,reverse);if(valueMutator){utils.pauseEvent(e);var state=this.state,oldValue=state.value,mutatedValue=valueMutator(oldValue,this.props),value=this.trimAlignValue(mutatedValue);if(value===oldValue)return;this.onChange({value:value}),this.props.onAfterChange(value),this.onEnd()}}},{key:"getValue",value:function getValue(){return this.state.value}},{key:"getLowerBound",value:function getLowerBound(){var minPoint=this.props.startPoint||this.props.min;return this.state.value>minPoint?minPoint:this.state.value}},{key:"getUpperBound",value:function getUpperBound(){return this.state.value<this.props.startPoint?this.props.startPoint:this.state.value}},{key:"trimAlignValue",value:function trimAlignValue(v){var nextProps=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(null===v)return null;var mergedProps=_objectSpread(_objectSpread({},this.props),nextProps),val=utils.ensureValueInRange(v,mergedProps);return utils.ensureValuePrecision(val,mergedProps)}},{key:"render",value:function render(){var _this2=this,_this$props3=this.props,prefixCls=_this$props3.prefixCls,vertical=_this$props3.vertical,included=_this$props3.included,disabled=_this$props3.disabled,minimumTrackStyle=_this$props3.minimumTrackStyle,trackStyle=_this$props3.trackStyle,handleStyle=_this$props3.handleStyle,tabIndex=_this$props3.tabIndex,ariaLabelForHandle=_this$props3.ariaLabelForHandle,ariaLabelledByForHandle=_this$props3.ariaLabelledByForHandle,ariaValueTextFormatterForHandle=_this$props3.ariaValueTextFormatterForHandle,min=_this$props3.min,max=_this$props3.max,startPoint=_this$props3.startPoint,reverse=_this$props3.reverse,handleGenerator=_this$props3.handle,_this$state=this.state,value=_this$state.value,dragging=_this$state.dragging,offset=this.calcOffset(value),handle=handleGenerator({className:"".concat(prefixCls,"-handle"),prefixCls:prefixCls,vertical:vertical,offset:offset,value:value,dragging:dragging,disabled:disabled,min:min,max:max,reverse:reverse,index:0,tabIndex:tabIndex,ariaLabel:ariaLabelForHandle,ariaLabelledBy:ariaLabelledByForHandle,ariaValueTextFormatter:ariaValueTextFormatterForHandle,style:handleStyle[0]||handleStyle,ref:function ref(h){return _this2.saveHandle(0,h)}}),trackOffset=void 0===startPoint?0:this.calcOffset(startPoint),mergedTrackStyle=trackStyle[0]||trackStyle,track=React.createElement(Track,{className:"".concat(prefixCls,"-track"),vertical:vertical,included:included,offset:trackOffset,reverse:reverse,length:offset-trackOffset,style:_objectSpread(_objectSpread({},minimumTrackStyle),mergedTrackStyle)});return{tracks:track,handles:handle}}}]),Slider}(React.Component);export default createSlider(Slider);