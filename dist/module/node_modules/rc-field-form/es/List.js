import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/es.array.slice.js";import"/node_modules/core-js/modules/esnext.set.add-all.js";import"/node_modules/core-js/modules/esnext.set.delete-all.js";import"/node_modules/core-js/modules/esnext.set.difference.js";import"/node_modules/core-js/modules/esnext.set.every.js";import"/node_modules/core-js/modules/esnext.set.filter.js";import"/node_modules/core-js/modules/esnext.set.find.js";import"/node_modules/core-js/modules/esnext.set.intersection.js";import"/node_modules/core-js/modules/esnext.set.is-disjoint-from.js";import"/node_modules/core-js/modules/esnext.set.is-subset-of.js";import"/node_modules/core-js/modules/esnext.set.is-superset-of.js";import"/node_modules/core-js/modules/esnext.set.join.js";import"/node_modules/core-js/modules/esnext.set.map.js";import"/node_modules/core-js/modules/esnext.set.reduce.js";import"/node_modules/core-js/modules/esnext.set.some.js";import"/node_modules/core-js/modules/esnext.set.symmetric-difference.js";import"/node_modules/core-js/modules/esnext.set.union.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import _toConsumableArray from"/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js";import React from"c:\\node_modules\\react\\index.js";import warning from"/node_modules/rc-util/es/warning.js";import FieldContext from"/node_modules/rc-field-form/es/FieldContext.js";import Field from"/node_modules/rc-field-form/es/Field.js";import{move as _move,getNamePath}from"/node_modules/rc-field-form/es/utils/valueUtil.js";var List=function List(_ref){var name=_ref.name,initialValue=_ref.initialValue,children=_ref.children,rules=_ref.rules,validateTrigger=_ref.validateTrigger,context=React.useContext(FieldContext),keyRef=React.useRef({keys:[],id:0}),keyManager=keyRef.current;if("function"!=typeof children)return warning(!1,"Form.List only accepts function as children."),null;var parentPrefixName=getNamePath(context.prefixName)||[],prefixName=[].concat(_toConsumableArray(parentPrefixName),_toConsumableArray(getNamePath(name)));return React.createElement(FieldContext.Provider,{value:_objectSpread(_objectSpread({},context),{},{prefixName:prefixName})},React.createElement(Field,{name:[],shouldUpdate:function shouldUpdate(prevValue,nextValue,_ref2){var source=_ref2.source;return"internal"!==source&&prevValue!==nextValue},rules:rules,validateTrigger:validateTrigger,initialValue:initialValue,isList:!0},function(_ref3,meta){var _ref3$value=_ref3.value,value=void 0===_ref3$value?[]:_ref3$value,onChange=_ref3.onChange,getFieldValue=context.getFieldValue,getNewValue=function getNewValue(){var values=getFieldValue(prefixName||[]);return values||[]},listValue=value||[];return Array.isArray(listValue)||(listValue=[]),children(listValue.map(function(__,index){var key=keyManager.keys[index];return void 0===key&&(keyManager.keys[index]=keyManager.id,key=keyManager.keys[index],keyManager.id+=1),{name:index,key:key,isListField:!0}}),{add:function add(defaultValue,index){var newValue=getNewValue();0<=index&&index<=newValue.length?(keyManager.keys=[].concat(_toConsumableArray(keyManager.keys.slice(0,index)),[keyManager.id],_toConsumableArray(keyManager.keys.slice(index))),onChange([].concat(_toConsumableArray(newValue.slice(0,index)),[defaultValue],_toConsumableArray(newValue.slice(index))))):(keyManager.keys=[].concat(_toConsumableArray(keyManager.keys),[keyManager.id]),onChange([].concat(_toConsumableArray(newValue),[defaultValue]))),keyManager.id+=1},remove:function remove(index){var newValue=getNewValue(),indexSet=new Set(Array.isArray(index)?index:[index]);0>=indexSet.size||(keyManager.keys=keyManager.keys.filter(function(_,keysIndex){return!indexSet.has(keysIndex)}),onChange(newValue.filter(function(_,valueIndex){return!indexSet.has(valueIndex)})))},move:function move(from,to){if(from!==to){var newValue=getNewValue();0>from||from>=newValue.length||0>to||to>=newValue.length||(keyManager.keys=_move(keyManager.keys,from,to),onChange(_move(newValue,from,to)))}}},meta)}))};export default List;