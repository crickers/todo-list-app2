import"/node_modules/core-js/modules/es.array.index-of.js";import"/node_modules/core-js/modules/es.array.reverse.js";import"/node_modules/core-js/modules/es.regexp.to-string.js";import _typeof from"/node_modules/@babel/runtime/helpers/esm/typeof.js";import _defineProperty from"/node_modules/@babel/runtime/helpers/esm/defineProperty.js";import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";var __rest=this&&this.__rest||function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&0>e.indexOf(p)&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols)for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++)0>e.indexOf(p[i])&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]]);return t};import React from"c:\\node_modules\\react\\index.js";import RcSlider,{Range as RcRange,Handle as RcHandle}from"/node_modules/rc-slider.js";import classNames from"/node_modules/classnames.js";import SliderTooltip from"/node_modules/antd/es/slider/SliderTooltip.js";import{ConfigContext}from"/node_modules/antd/es/config-provider.js";var Slider=React.forwardRef(function(props,ref){var _React$useContext=React.useContext(ConfigContext),getPrefixCls=_React$useContext.getPrefixCls,direction=_React$useContext.direction,getPopupContainer=_React$useContext.getPopupContainer,_React$useState=React.useState({}),_React$useState2=_slicedToArray(_React$useState,2),visibles=_React$useState2[0],setVisibles=_React$useState2[1],toggleTooltipVisible=function toggleTooltipVisible(index,visible){setVisibles(function(prev){return _extends(_extends({},prev),_defineProperty({},index,visible))})},getTooltipPlacement=function getTooltipPlacement(tooltipPlacement,vertical){return tooltipPlacement?tooltipPlacement:vertical?"rtl"===direction?"left":"right":"top"},handleWithTooltip=function handleWithTooltip(_a){var tooltipPrefixCls=_a.tooltipPrefixCls,prefixCls=_a.prefixCls,_b=_a.info,value=_b.value,dragging=_b.dragging,index=_b.index,restProps=__rest(_b,["value","dragging","index"]),tipFormatter=props.tipFormatter,tooltipVisible=props.tooltipVisible,tooltipPlacement=props.tooltipPlacement,getTooltipPopupContainer=props.getTooltipPopupContainer,vertical=props.vertical,isTipFormatter=!!tipFormatter&&(visibles[index]||dragging),visible=tooltipVisible||void 0===tooltipVisible&&isTipFormatter;return React.createElement(SliderTooltip,{prefixCls:tooltipPrefixCls,title:tipFormatter?tipFormatter(value):"",visible:visible,placement:getTooltipPlacement(tooltipPlacement,vertical),transitionName:"zoom-down",key:index,overlayClassName:"".concat(prefixCls,"-tooltip"),getPopupContainer:getTooltipPopupContainer||getPopupContainer},React.createElement(RcHandle,_extends({},restProps,{value:value,onMouseEnter:function onMouseEnter(){return toggleTooltipVisible(index,!0)},onMouseLeave:function onMouseLeave(){return toggleTooltipVisible(index,!1)}})))},customizePrefixCls=props.prefixCls,customizeTooltipPrefixCls=props.tooltipPrefixCls,range=props.range,className=props.className,restProps=__rest(props,["prefixCls","tooltipPrefixCls","range","className"]),prefixCls=getPrefixCls("slider",customizePrefixCls),tooltipPrefixCls=getPrefixCls("tooltip",customizeTooltipPrefixCls),cls=classNames(className,_defineProperty({},"".concat(prefixCls,"-rtl"),"rtl"===direction));"rtl"!==direction||restProps.vertical||(restProps.reverse=!restProps.reverse);var draggableTrack;return"object"===_typeof(range)&&(draggableTrack=range.draggableTrack),range?React.createElement(RcRange,_extends({},restProps,{step:restProps.step,draggableTrack:draggableTrack,className:cls,ref:ref,handle:function handle(info){return handleWithTooltip({tooltipPrefixCls:tooltipPrefixCls,prefixCls:prefixCls,info:info})},prefixCls:prefixCls})):React.createElement(RcSlider,_extends({},restProps,{step:restProps.step,className:cls,ref:ref,handle:function handle(info){return handleWithTooltip({tooltipPrefixCls:tooltipPrefixCls,prefixCls:prefixCls,info:info})},prefixCls:prefixCls}))});Slider.displayName="Slider",Slider.defaultProps={tipFormatter:function tipFormatter(value){return"number"==typeof value?value.toString():""}};export default Slider;