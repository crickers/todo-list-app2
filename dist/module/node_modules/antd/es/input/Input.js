import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import _classCallCheck from"/node_modules/@babel/runtime/helpers/esm/classCallCheck.js";import _createClass from"/node_modules/@babel/runtime/helpers/esm/createClass.js";import _inherits from"/node_modules/@babel/runtime/helpers/esm/inherits.js";import _createSuper from"/node_modules/@babel/runtime/helpers/esm/createSuper.js";import _defineProperty from"/node_modules/@babel/runtime/helpers/esm/defineProperty.js";import React from"c:\\node_modules\\react\\index.js";import classNames from"/node_modules/classnames.js";import omit from"/node_modules/rc-util/es/omit.js";import ClearableLabeledInput,{hasPrefixSuffix}from"/node_modules/antd/es/input/ClearableLabeledInput.js";import{ConfigConsumer}from"/node_modules/antd/es/config-provider.js";import SizeContext from"/node_modules/antd/es/config-provider/SizeContext.js";import devWarning from"/node_modules/antd/es/_util/devWarning.js";export function fixControlledValue(value){return"undefined"==typeof value||null===value?"":value}export function resolveOnChange(target,e,onChange){if(onChange){var event=e;if("click"===e.type){event=Object.create(e),event.target=target,event.currentTarget=target;var originalInputValue=target.value;return target.value="",onChange(event),void(target.value=originalInputValue)}onChange(event)}}export function getInputClassName(prefixCls,bordered,size,disabled,direction){var _classNames;return classNames(prefixCls,(_classNames={},_defineProperty(_classNames,"".concat(prefixCls,"-sm"),"small"===size),_defineProperty(_classNames,"".concat(prefixCls,"-lg"),"large"===size),_defineProperty(_classNames,"".concat(prefixCls,"-disabled"),disabled),_defineProperty(_classNames,"".concat(prefixCls,"-rtl"),"rtl"===direction),_defineProperty(_classNames,"".concat(prefixCls,"-borderless"),!bordered),_classNames))}export function triggerFocus(element,option){if(element){element.focus(option);var cursor=(option||{}).cursor;if(cursor){var len=element.value.length;"start"===cursor?element.setSelectionRange(0,0):"end"===cursor?element.setSelectionRange(len,len):element.setSelectionRange(0,len)}}}var Input=function(_React$Component){function Input(props){var _this;_classCallCheck(this,Input),_this=_super.call(this,props),_this.direction="ltr",_this.focus=function(option){triggerFocus(_this.input,option)},_this.saveClearableInput=function(input){_this.clearableInput=input},_this.saveInput=function(input){_this.input=input},_this.onFocus=function(e){var onFocus=_this.props.onFocus;_this.setState({focused:!0},_this.clearPasswordValueAttribute),onFocus&&onFocus(e)},_this.onBlur=function(e){var onBlur=_this.props.onBlur;_this.setState({focused:!1},_this.clearPasswordValueAttribute),onBlur&&onBlur(e)},_this.handleReset=function(e){_this.setValue("",function(){_this.focus()}),resolveOnChange(_this.input,e,_this.props.onChange)},_this.renderInput=function(prefixCls,size,bordered){var input=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},_this$props=_this.props,className=_this$props.className,addonBefore=_this$props.addonBefore,addonAfter=_this$props.addonAfter,customizeSize=_this$props.size,disabled=_this$props.disabled,otherProps=omit(_this.props,["prefixCls","onPressEnter","addonBefore","addonAfter","prefix","suffix","allowClear","defaultValue","size","inputType","bordered"]);return React.createElement("input",_extends({autoComplete:input.autoComplete},otherProps,{onChange:_this.handleChange,onFocus:_this.onFocus,onBlur:_this.onBlur,onKeyDown:_this.handleKeyDown,className:classNames(getInputClassName(prefixCls,bordered,customizeSize||size,disabled,_this.direction),_defineProperty({},className,className&&!addonBefore&&!addonAfter)),ref:_this.saveInput}))},_this.clearPasswordValueAttribute=function(){_this.removePasswordTimeout=setTimeout(function(){_this.input&&"password"===_this.input.getAttribute("type")&&_this.input.hasAttribute("value")&&_this.input.removeAttribute("value")})},_this.handleChange=function(e){_this.setValue(e.target.value,_this.clearPasswordValueAttribute),resolveOnChange(_this.input,e,_this.props.onChange)},_this.handleKeyDown=function(e){var _this$props2=_this.props,onPressEnter=_this$props2.onPressEnter,onKeyDown=_this$props2.onKeyDown;13===e.keyCode&&onPressEnter&&onPressEnter(e),onKeyDown&&onKeyDown(e)},_this.renderComponent=function(_ref2){var getPrefixCls=_ref2.getPrefixCls,direction=_ref2.direction,input=_ref2.input,_this$state=_this.state,value=_this$state.value,focused=_this$state.focused,_this$props3=_this.props,customizePrefixCls=_this$props3.prefixCls,_this$props3$bordered=_this$props3.bordered,bordered=void 0===_this$props3$bordered||_this$props3$bordered,prefixCls=getPrefixCls("input",customizePrefixCls);return _this.direction=direction,React.createElement(SizeContext.Consumer,null,function(size){return React.createElement(ClearableLabeledInput,_extends({size:size},_this.props,{prefixCls:prefixCls,inputType:"input",value:fixControlledValue(value),element:_this.renderInput(prefixCls,size,bordered,input),handleReset:_this.handleReset,ref:_this.saveClearableInput,direction:direction,focused:focused,triggerFocus:_this.focus,bordered:bordered}))})};var value="undefined"==typeof props.value?props.defaultValue:props.value;return _this.state={value:value,focused:!1,prevValue:props.value},_this}_inherits(Input,_React$Component);var _super=_createSuper(Input);return _createClass(Input,[{key:"componentDidMount",value:function componentDidMount(){this.clearPasswordValueAttribute()}},{key:"componentDidUpdate",value:function componentDidUpdate(){}},{key:"getSnapshotBeforeUpdate",value:function getSnapshotBeforeUpdate(prevProps){return hasPrefixSuffix(prevProps)!==hasPrefixSuffix(this.props)&&devWarning(this.input!==document.activeElement,"Input","When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ"),null}},{key:"componentWillUnmount",value:function componentWillUnmount(){this.removePasswordTimeout&&clearTimeout(this.removePasswordTimeout)}},{key:"blur",value:function blur(){this.input.blur()}},{key:"setSelectionRange",value:function setSelectionRange(start,end,direction){this.input.setSelectionRange(start,end,direction)}},{key:"select",value:function select(){this.input.select()}},{key:"setValue",value:function setValue(value,callback){void 0===this.props.value?this.setState({value:value},callback):null===callback||void 0===callback?void 0:callback()}},{key:"render",value:function render(){return React.createElement(ConfigConsumer,null,this.renderComponent)}}],[{key:"getDerivedStateFromProps",value:function getDerivedStateFromProps(nextProps,_ref3){var prevValue=_ref3.prevValue,newState={prevValue:nextProps.value};return(void 0!==nextProps.value||prevValue!==nextProps.value)&&(newState.value=nextProps.value),newState}}]),Input}(React.Component);Input.defaultProps={type:"text"};export default Input;