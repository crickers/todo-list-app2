import"/node_modules/core-js/modules/es.string.includes.js";import _defineProperty from"/node_modules/@babel/runtime/helpers/esm/defineProperty.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import React from"c:\\node_modules\\react\\index.js";import classNames from"/node_modules/classnames.js";import isEqual from"/node_modules/lodash/isEqual.js";import FilterFilled from"/node_modules/@ant-design/icons/es/icons/FilterFilled.js";import Button from"/node_modules/antd/es/button.js";import Menu from"/node_modules/antd/es/menu.js";import Checkbox from"/node_modules/antd/es/checkbox.js";import Radio from"/node_modules/antd/es/radio.js";import Dropdown from"/node_modules/antd/es/dropdown.js";import Empty from"/node_modules/antd/es/empty.js";import FilterDropdownMenuWrapper from"/node_modules/antd/es/table/hooks/useFilter/FilterWrapper.js";import useSyncState from"/node_modules/antd/es/_util/hooks/useSyncState.js";import{ConfigContext}from"/node_modules/antd/es/config-provider/context.js";var SubMenu=Menu.SubMenu,MenuItem=Menu.Item;function hasSubMenu(filters){return filters.some(function(_ref){var children=_ref.children;return children})}function renderFilterItems(_ref2){var filters=_ref2.filters,prefixCls=_ref2.prefixCls,filteredKeys=_ref2.filteredKeys,filterMultiple=_ref2.filterMultiple,locale=_ref2.locale;return 0===filters.length?React.createElement("div",{style:{margin:"16px 0"}},React.createElement(Empty,{image:Empty.PRESENTED_IMAGE_SIMPLE,description:locale.filterEmptyText,imageStyle:{height:24}})):filters.map(function(filter,index){var key=filter.value+"";if(filter.children)return React.createElement(SubMenu,{key:key||index,title:filter.text,popupClassName:"".concat(prefixCls,"-dropdown-submenu")},renderFilterItems({filters:filter.children,prefixCls:prefixCls,filteredKeys:filteredKeys,filterMultiple:filterMultiple,locale:locale}));var Component=filterMultiple?Checkbox:Radio;return React.createElement(MenuItem,{key:filter.value===void 0?index:key},React.createElement(Component,{checked:filteredKeys.includes(key)}),React.createElement("span",null,filter.text))})}function FilterDropdown(props){var _a,prefixCls=props.prefixCls,column=props.column,dropdownPrefixCls=props.dropdownPrefixCls,columnKey=props.columnKey,filterMultiple=props.filterMultiple,filterState=props.filterState,triggerFilter=props.triggerFilter,locale=props.locale,children=props.children,getPopupContainer=props.getPopupContainer,filterDropdownVisible=column.filterDropdownVisible,onFilterDropdownVisibleChange=column.onFilterDropdownVisibleChange,_React$useState=React.useState(!1),_React$useState2=_slicedToArray(_React$useState,2),visible=_React$useState2[0],setVisible=_React$useState2[1],filtered=!!(filterState&&((null===(_a=filterState.filteredKeys)||void 0===_a?void 0:_a.length)||filterState.forceFiltered)),triggerVisible=function triggerVisible(newVisible){setVisible(newVisible),onFilterDropdownVisibleChange&&onFilterDropdownVisibleChange(newVisible)},mergedVisible="boolean"==typeof filterDropdownVisible?filterDropdownVisible:visible,propFilteredKeys=filterState&&filterState.filteredKeys,_useSyncState=useSyncState(propFilteredKeys||[]),_useSyncState2=_slicedToArray(_useSyncState,2),getFilteredKeysSync=_useSyncState2[0],setFilteredKeysSync=_useSyncState2[1],onSelectKeys=function onSelectKeys(_ref3){var selectedKeys=_ref3.selectedKeys;setFilteredKeysSync(selectedKeys)};React.useEffect(function(){onSelectKeys({selectedKeys:propFilteredKeys||[]})},[propFilteredKeys]);var _React$useState3=React.useState([]),_React$useState4=_slicedToArray(_React$useState3,2),openKeys=_React$useState4[0],setOpenKeys=_React$useState4[1],openRef=React.useRef(),onOpenChange=function onOpenChange(keys){openRef.current=window.setTimeout(function(){setOpenKeys(keys)})},onMenuClick=function onMenuClick(){window.clearTimeout(openRef.current)};React.useEffect(function(){return function(){window.clearTimeout(openRef.current)}},[]);var dropdownContent,internalTriggerFilter=function internalTriggerFilter(keys){var mergedKeys=keys&&keys.length?keys:null;return null!==mergedKeys||filterState&&filterState.filteredKeys?isEqual(mergedKeys,null===filterState||void 0===filterState?void 0:filterState.filteredKeys)?null:void triggerFilter({column:column,key:columnKey,filteredKeys:mergedKeys}):null},onConfirm=function onConfirm(){triggerVisible(!1),internalTriggerFilter(getFilteredKeysSync())},onReset=function onReset(){setFilteredKeysSync([]),triggerVisible(!1),internalTriggerFilter([])},doFilter=function doFilter(){var param=0<arguments.length&&arguments[0]!==void 0?arguments[0]:{closeDropdown:!0};triggerVisible(!param.closeDropdown),internalTriggerFilter(getFilteredKeysSync())},dropdownMenuClass=classNames(_defineProperty({},"".concat(dropdownPrefixCls,"-menu-without-submenu"),!hasSubMenu(column.filters||[])));if("function"==typeof column.filterDropdown)dropdownContent=column.filterDropdown({prefixCls:"".concat(dropdownPrefixCls,"-custom"),setSelectedKeys:function setSelectedKeys(selectedKeys){return onSelectKeys({selectedKeys:selectedKeys})},selectedKeys:getFilteredKeysSync(),confirm:doFilter,clearFilters:onReset,filters:column.filters,visible:mergedVisible});else if(column.filterDropdown)dropdownContent=column.filterDropdown;else{var selectedKeys=getFilteredKeysSync()||[];dropdownContent=React.createElement(React.Fragment,null,React.createElement(Menu,{multiple:filterMultiple,prefixCls:"".concat(dropdownPrefixCls,"-menu"),className:dropdownMenuClass,onClick:onMenuClick,onSelect:onSelectKeys,onDeselect:onSelectKeys,selectedKeys:selectedKeys,getPopupContainer:getPopupContainer,openKeys:openKeys,onOpenChange:onOpenChange},renderFilterItems({filters:column.filters||[],prefixCls:prefixCls,filteredKeys:getFilteredKeysSync(),filterMultiple:filterMultiple,locale:locale})),React.createElement("div",{className:"".concat(prefixCls,"-dropdown-btns")},React.createElement(Button,{type:"link",size:"small",disabled:0===selectedKeys.length,onClick:onReset},locale.filterReset),React.createElement(Button,{type:"primary",size:"small",onClick:onConfirm},locale.filterConfirm)))}var filterIcon,menu=React.createElement(FilterDropdownMenuWrapper,{className:"".concat(prefixCls,"-dropdown")},dropdownContent);filterIcon="function"==typeof column.filterIcon?column.filterIcon(filtered):column.filterIcon?column.filterIcon:React.createElement(FilterFilled,null);var _React$useContext=React.useContext(ConfigContext),direction=_React$useContext.direction;return React.createElement("div",{className:classNames("".concat(prefixCls,"-column"))},React.createElement("span",{className:"".concat(prefixCls,"-column-title")},children),React.createElement("span",{className:classNames("".concat(prefixCls,"-trigger-container"),_defineProperty({},"".concat(prefixCls,"-trigger-container-open"),mergedVisible)),onClick:function onClick(e){e.stopPropagation()}},React.createElement(Dropdown,{overlay:menu,trigger:["click"],visible:mergedVisible,onVisibleChange:function onVisibleChange(newVisible){newVisible&&propFilteredKeys!==void 0&&setFilteredKeysSync(propFilteredKeys||[]),triggerVisible(newVisible),newVisible||column.filterDropdown||onConfirm()},getPopupContainer:getPopupContainer,placement:"rtl"===direction?"bottomLeft":"bottomRight"},React.createElement("span",{role:"button",tabIndex:-1,className:classNames("".concat(prefixCls,"-trigger"),{active:filtered})},filterIcon))))}export default FilterDropdown;