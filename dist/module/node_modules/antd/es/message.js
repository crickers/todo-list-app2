import"/node_modules/core-js/modules/es.promise.js";import"/node_modules/core-js/modules/es.regexp.to-string.js";import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import _defineProperty from"/node_modules/@babel/runtime/helpers/esm/defineProperty.js";import React from"c:\\node_modules\\react\\index.js";import classNames from"/node_modules/classnames.js";import RCNotification from"/node_modules/rc-notification.js";import LoadingOutlined from"/node_modules/@ant-design/icons/es/icons/LoadingOutlined.js";import ExclamationCircleFilled from"/node_modules/@ant-design/icons/es/icons/ExclamationCircleFilled.js";import CloseCircleFilled from"/node_modules/@ant-design/icons/es/icons/CloseCircleFilled.js";import CheckCircleFilled from"/node_modules/@ant-design/icons/es/icons/CheckCircleFilled.js";import InfoCircleFilled from"/node_modules/@ant-design/icons/es/icons/InfoCircleFilled.js";import createUseMessage from"/node_modules/antd/es/message/hooks/useMessage.js";var messageInstance,defaultTop,getContainer,maxCount,defaultDuration=3,key=1,localPrefixCls="ant-message",transitionName="move-up",rtl=!1;export function getKeyThenIncreaseKey(){return key++}function setMessageConfig(options){options.top!==void 0&&(defaultTop=options.top,messageInstance=null),options.duration!==void 0&&(defaultDuration=options.duration),options.prefixCls!==void 0&&(localPrefixCls=options.prefixCls),options.getContainer!==void 0&&(getContainer=options.getContainer),options.transitionName!==void 0&&(transitionName=options.transitionName,messageInstance=null),options.maxCount!==void 0&&(maxCount=options.maxCount,messageInstance=null),options.rtl!==void 0&&(rtl=options.rtl)}function getRCNotificationInstance(args,callback){var prefixCls=args.prefixCls||localPrefixCls;return messageInstance?void callback({prefixCls:prefixCls,instance:messageInstance}):void RCNotification.newInstance({prefixCls:prefixCls,transitionName:transitionName,style:{top:defaultTop},getContainer:getContainer,maxCount:maxCount},function(instance){return messageInstance?void callback({prefixCls:prefixCls,instance:messageInstance}):void(messageInstance=instance,callback({prefixCls:prefixCls,instance:instance}))})}var typeToIcon={info:InfoCircleFilled,success:CheckCircleFilled,error:CloseCircleFilled,warning:ExclamationCircleFilled,loading:LoadingOutlined};function getRCNoticeProps(args,prefixCls){var _classNames,duration=args.duration===void 0?defaultDuration:args.duration,IconComponent=typeToIcon[args.type],messageClass=classNames("".concat(prefixCls,"-custom-content"),(_classNames={},_defineProperty(_classNames,"".concat(prefixCls,"-").concat(args.type),args.type),_defineProperty(_classNames,"".concat(prefixCls,"-rtl"),!0===rtl),_classNames));return{key:args.key,duration:duration,style:args.style||{},className:args.className,content:React.createElement("div",{className:messageClass},args.icon||IconComponent&&React.createElement(IconComponent,null),React.createElement("span",null,args.content)),onClose:args.onClose,onClick:args.onClick}}function notice(args){var target=args.key||key++,closePromise=new Promise(function(resolve){var callback=function callback(){return"function"==typeof args.onClose&&args.onClose(),resolve(!0)};getRCNotificationInstance(args,function(_ref){var prefixCls=_ref.prefixCls,instance=_ref.instance;instance.notice(getRCNoticeProps(_extends(_extends({},args),{key:target,onClose:callback}),prefixCls))})}),result=function result(){messageInstance&&messageInstance.removeNotice(target)};return result.then=function(filled,rejected){return closePromise.then(filled,rejected)},result.promise=closePromise,result}function isArgsProps(content){return"[object Object]"===Object.prototype.toString.call(content)&&!!content.content}var api={open:notice,config:setMessageConfig,destroy:function destroy(messageKey){if(messageInstance)if(messageKey){var _messageInstance=messageInstance,removeNotice=_messageInstance.removeNotice;removeNotice(messageKey)}else{var _messageInstance2=messageInstance,destroy=_messageInstance2.destroy;destroy(),messageInstance=null}}};export function attachTypeApi(originalApi,type){originalApi[type]=function(content,duration,onClose){return isArgsProps(content)?originalApi.open(_extends(_extends({},content),{type:type})):("function"==typeof duration&&(onClose=duration,duration=void 0),originalApi.open({content:content,duration:duration,type:type,onClose:onClose}))}}["success","info","warning","error","loading"].forEach(function(type){return attachTypeApi(api,type)}),api.warn=api.warning,api.useMessage=createUseMessage(getRCNotificationInstance,getRCNoticeProps);export var getInstance=function getInstance(){return null};export default api;