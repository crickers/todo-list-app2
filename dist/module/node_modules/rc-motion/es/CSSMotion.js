import _defineProperty from"/node_modules/@babel/runtime/helpers/esm/defineProperty.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import _typeof from"/node_modules/@babel/runtime/helpers/esm/typeof.js";import React from"c:\\node_modules\\react\\index.js";import{useRef}from"c:\\node_modules\\react\\index.js";import findDOMNode from"/node_modules/rc-util/es/Dom/findDOMNode.js";import{fillRef}from"/node_modules/rc-util/es/ref.js";import classNames from"/node_modules/classnames.js";import{getTransitionName,supportTransition}from"/node_modules/rc-motion/es/util/motion.js";import{STATUS_NONE,STEP_PREPARE,STEP_START}from"/node_modules/rc-motion/es/interface.js";import useStatus from"/node_modules/rc-motion/es/hooks/useStatus.js";import DomWrapper from"/node_modules/rc-motion/es/DomWrapper.js";import{isActive}from"/node_modules/rc-motion/es/hooks/useStepQueue.js";export function genCSSMotion(config){function isSupportTransition(props){return!!(props.motionName&&transitionSupport)}var transitionSupport=config;"object"===_typeof(config)&&(transitionSupport=config.transitionSupport);var CSSMotion=React.forwardRef(function(props,ref){var _props$visible=props.visible,visible=void 0===_props$visible||_props$visible,_props$removeOnLeave=props.removeOnLeave,removeOnLeave=void 0===_props$removeOnLeave||_props$removeOnLeave,forceRender=props.forceRender,children=props.children,motionName=props.motionName,leavedClassName=props.leavedClassName,eventProps=props.eventProps,supportMotion=isSupportTransition(props),nodeRef=useRef(),wrapperNodeRef=useRef(),_useStatus=useStatus(supportMotion,visible,function getDomElement(){try{return findDOMNode(nodeRef.current||wrapperNodeRef.current)}catch(e){return null}},props),_useStatus2=_slicedToArray(_useStatus,4),status=_useStatus2[0],statusStep=_useStatus2[1],statusStyle=_useStatus2[2],mergedVisible=_useStatus2[3],originRef=useRef(ref);originRef.current=ref;var motionChildren,setNodeRef=React.useCallback(function(node){nodeRef.current=node,fillRef(originRef.current,node)},[]),mergedProps=_objectSpread(_objectSpread({},eventProps),{},{visible:visible});if(!children)motionChildren=null;else if(status===STATUS_NONE||!isSupportTransition(props))motionChildren=mergedVisible?children(_objectSpread({},mergedProps),setNodeRef):removeOnLeave?forceRender?children(_objectSpread(_objectSpread({},mergedProps),{},{style:{display:"none"}}),setNodeRef):null:children(_objectSpread(_objectSpread({},mergedProps),{},{className:leavedClassName}),setNodeRef);else{var _classNames,statusSuffix;statusStep===STEP_PREPARE?statusSuffix="prepare":isActive(statusStep)?statusSuffix="active":statusStep===STEP_START&&(statusSuffix="start"),motionChildren=children(_objectSpread(_objectSpread({},mergedProps),{},{className:classNames(getTransitionName(motionName,status),(_classNames={},_defineProperty(_classNames,getTransitionName(motionName,"".concat(status,"-").concat(statusSuffix)),statusSuffix),_defineProperty(_classNames,motionName,"string"==typeof motionName),_classNames)),style:statusStyle}),setNodeRef)}return React.createElement(DomWrapper,{ref:wrapperNodeRef},motionChildren)});return CSSMotion.displayName="CSSMotion",CSSMotion}export default genCSSMotion(supportTransition);