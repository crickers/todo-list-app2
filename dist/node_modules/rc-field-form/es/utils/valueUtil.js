import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/es.array.reduce.js";import"/node_modules/core-js/modules/es.array.slice.js";import"/node_modules/core-js/modules/esnext.set.add-all.js";import"/node_modules/core-js/modules/esnext.set.delete-all.js";import"/node_modules/core-js/modules/esnext.set.difference.js";import"/node_modules/core-js/modules/esnext.set.every.js";import"/node_modules/core-js/modules/esnext.set.filter.js";import"/node_modules/core-js/modules/esnext.set.find.js";import"/node_modules/core-js/modules/esnext.set.intersection.js";import"/node_modules/core-js/modules/esnext.set.is-disjoint-from.js";import"/node_modules/core-js/modules/esnext.set.is-subset-of.js";import"/node_modules/core-js/modules/esnext.set.is-superset-of.js";import"/node_modules/core-js/modules/esnext.set.join.js";import"/node_modules/core-js/modules/esnext.set.map.js";import"/node_modules/core-js/modules/esnext.set.reduce.js";import"/node_modules/core-js/modules/esnext.set.some.js";import"/node_modules/core-js/modules/esnext.set.symmetric-difference.js";import"/node_modules/core-js/modules/esnext.set.union.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import _toConsumableArray from"/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js";import _typeof from"/node_modules/@babel/runtime/helpers/esm/typeof.js";import get from"/node_modules/rc-util/es/utils/get.js";import set from"/node_modules/rc-util/es/utils/set.js";import{toArray}from"/node_modules/rc-field-form/es/utils/typeUtil.js";export function getNamePath(path){return toArray(path)}export function getValue(store,namePath){var value=get(store,namePath);return value}export function setValue(store,namePath,value){var newStore=set(store,namePath,value);return newStore}export function cloneByNamePathList(store,namePathList){var newStore={};return namePathList.forEach(function(namePath){var value=getValue(store,namePath);newStore=setValue(newStore,namePath,value)}),newStore}export function containsNamePath(namePathList,namePath){return namePathList&&namePathList.some(function(path){return matchNamePath(path,namePath)})}function isObject(obj){return"object"===_typeof(obj)&&null!==obj&&Object.getPrototypeOf(obj)===Object.prototype}function internalSetValues(store,values){var newStore=Array.isArray(store)?_toConsumableArray(store):_objectSpread({},store);return values?(Object.keys(values).forEach(function(key){var prevValue=newStore[key],value=values[key],recursive=isObject(prevValue)&&isObject(value);newStore[key]=recursive?internalSetValues(prevValue,value||{}):value}),newStore):newStore}export function setValues(store){for(var _len=arguments.length,restValues=Array(1<_len?_len-1:0),_key=1;_key<_len;_key++)restValues[_key-1]=arguments[_key];return restValues.reduce(function(current,newStore){return internalSetValues(current,newStore)},store)}export function matchNamePath(namePath,changedNamePath){return!!(namePath&&changedNamePath&&namePath.length===changedNamePath.length)&&namePath.every(function(nameUnit,i){return changedNamePath[i]===nameUnit})}export function isSimilar(source,target){if(source===target)return!0;if(!source&&target||source&&!target)return!1;if(!source||!target||"object"!==_typeof(source)||"object"!==_typeof(target))return!1;var sourceKeys=Object.keys(source),targetKeys=Object.keys(target),keys=new Set([].concat(_toConsumableArray(sourceKeys),_toConsumableArray(targetKeys)));return _toConsumableArray(keys).every(function(key){var sourceValue=source[key],targetValue=target[key];return!("function"!=typeof sourceValue||"function"!=typeof targetValue)||sourceValue===targetValue})}export function defaultGetValueFromEvent(valuePropName){var event=1>=arguments.length?void 0:arguments[1];return event&&event.target&&valuePropName in event.target?event.target[valuePropName]:event}export function move(array,moveIndex,toIndex){var length=array.length;if(0>moveIndex||moveIndex>=length||0>toIndex||toIndex>=length)return array;var item=array[moveIndex],diff=moveIndex-toIndex;return 0<diff?[].concat(_toConsumableArray(array.slice(0,toIndex)),[item],_toConsumableArray(array.slice(toIndex,moveIndex)),_toConsumableArray(array.slice(moveIndex+1,length))):0>diff?[].concat(_toConsumableArray(array.slice(0,moveIndex)),_toConsumableArray(array.slice(moveIndex+1,toIndex+1)),[item],_toConsumableArray(array.slice(toIndex+1,length))):array}