import"/node_modules/core-js/modules/es.array.index-of.js";import"/node_modules/core-js/modules/es.object.assign.js";import _defineProperty from"/node_modules/@babel/runtime/helpers/esm/defineProperty.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import _objectWithoutProperties from"/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js";import React from"c:\\node_modules\\react\\index.js";import Trigger from"/node_modules/rc-trigger.js";import classNames from"/node_modules/classnames.js";import Placements from"/node_modules/rc-dropdown/es/placements.js";function Dropdown(props,ref){var _props$arrow=props.arrow,arrow=void 0!==_props$arrow&&_props$arrow,_props$prefixCls=props.prefixCls,prefixCls=void 0===_props$prefixCls?"rc-dropdown":_props$prefixCls,transitionName=props.transitionName,animation=props.animation,align=props.align,_props$placement=props.placement,placement=void 0===_props$placement?"bottomLeft":_props$placement,_props$placements=props.placements,placements=void 0===_props$placements?Placements:_props$placements,getPopupContainer=props.getPopupContainer,showAction=props.showAction,hideAction=props.hideAction,overlayClassName=props.overlayClassName,overlayStyle=props.overlayStyle,visible=props.visible,_props$trigger=props.trigger,trigger=void 0===_props$trigger?["hover"]:_props$trigger,otherProps=_objectWithoutProperties(props,["arrow","prefixCls","transitionName","animation","align","placement","placements","getPopupContainer","showAction","hideAction","overlayClassName","overlayStyle","visible","trigger"]),_React$useState=React.useState(),_React$useState2=_slicedToArray(_React$useState,2),triggerVisible=_React$useState2[0],setTriggerVisible=_React$useState2[1],mergedVisible="visible"in props?visible:triggerVisible,triggerRef=React.useRef(null);React.useImperativeHandle(ref,function(){return triggerRef.current});var getOverlayElement=function getOverlayElement(){var overlayElement,overlay=props.overlay;return overlayElement="function"==typeof overlay?overlay():overlay,overlayElement},onClick=function onClick(e){var onOverlayClick=props.onOverlayClick,overlayProps=getOverlayElement().props;setTriggerVisible(!1),onOverlayClick&&onOverlayClick(e),overlayProps.onClick&&overlayProps.onClick(e)},getMenuElement=function getMenuElement(){var overlayElement=getOverlayElement(),extraOverlayProps={prefixCls:"".concat(prefixCls,"-menu"),onClick:onClick};return"string"==typeof overlayElement.type&&delete extraOverlayProps.prefixCls,React.createElement(React.Fragment,null,arrow&&React.createElement("div",{className:"".concat(prefixCls,"-arrow")}),React.cloneElement(overlayElement,extraOverlayProps))},getMinOverlayWidthMatchTrigger=function getMinOverlayWidthMatchTrigger(){var minOverlayWidthMatchTrigger=props.minOverlayWidthMatchTrigger,alignPoint=props.alignPoint;return"minOverlayWidthMatchTrigger"in props?minOverlayWidthMatchTrigger:!alignPoint},getOpenClassName=function getOpenClassName(){var openClassName=props.openClassName;return void 0===openClassName?"".concat(prefixCls,"-open"):openClassName},triggerHideAction=hideAction;return triggerHideAction||-1===trigger.indexOf("contextMenu")||(triggerHideAction=["click"]),React.createElement(Trigger,Object.assign({},otherProps,{prefixCls:prefixCls,ref:triggerRef,popupClassName:classNames(overlayClassName,_defineProperty({},"".concat(prefixCls,"-show-arrow"),arrow)),popupStyle:overlayStyle,builtinPlacements:placements,action:trigger,showAction:showAction,hideAction:triggerHideAction||[],popupPlacement:placement,popupAlign:align,popupTransitionName:transitionName,popupAnimation:animation,popupVisible:mergedVisible,stretch:getMinOverlayWidthMatchTrigger()?"minWidth":"",popup:function getMenuElementOrLambda(){var overlay=props.overlay;return"function"==typeof overlay?getMenuElement:getMenuElement()}(),onPopupVisibleChange:function onVisibleChange(visible){var onVisibleChange=props.onVisibleChange;setTriggerVisible(visible),"function"==typeof onVisibleChange&&onVisibleChange(visible)},getPopupContainer:getPopupContainer}),function renderChildren(){var children=props.children,childrenProps=children.props?children.props:{},childClassName=classNames(childrenProps.className,getOpenClassName());return triggerVisible&&children?React.cloneElement(children,{className:childClassName}):children}())}export default React.forwardRef(Dropdown);