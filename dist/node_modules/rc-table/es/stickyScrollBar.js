import _defineProperty from"/node_modules/@babel/runtime/helpers/esm/defineProperty.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import React from"c:\\node_modules\\react\\index.js";import addEventListener from"/node_modules/rc-util/es/Dom/addEventListener.js";import getScrollBarSize from"/node_modules/rc-util/es/getScrollBarSize.js";import classNames from"/node_modules/classnames.js";import{getOffset}from"/node_modules/rc-util/es/Dom/css.js";import TableContext from"/node_modules/rc-table/es/context/TableContext.js";import{useLayoutState}from"/node_modules/rc-table/es/hooks/useFrame.js";var StickyScrollBar=function StickyScrollBar(_ref,ref){var _scrollBodyRef$curren,_scrollBodyRef$curren2,scrollBodyRef=_ref.scrollBodyRef,onScroll=_ref.onScroll,offsetScroll=_ref.offsetScroll,container=_ref.container,_React$useContext=React.useContext(TableContext),prefixCls=_React$useContext.prefixCls,bodyScrollWidth=(null===(_scrollBodyRef$curren=scrollBodyRef.current)||void 0===_scrollBodyRef$curren?void 0:_scrollBodyRef$curren.scrollWidth)||0,bodyWidth=(null===(_scrollBodyRef$curren2=scrollBodyRef.current)||void 0===_scrollBodyRef$curren2?void 0:_scrollBodyRef$curren2.clientWidth)||0,scrollBarWidth=bodyScrollWidth&&bodyWidth*(bodyWidth/bodyScrollWidth),scrollBarRef=React.useRef(),_useLayoutState=useLayoutState({scrollLeft:0,isHiddenScrollBar:!1}),_useLayoutState2=_slicedToArray(_useLayoutState,2),scrollState=_useLayoutState2[0],setScrollState=_useLayoutState2[1],refState=React.useRef({delta:0,x:0}),_React$useState=React.useState(!1),_React$useState2=_slicedToArray(_React$useState,2),isActive=_React$useState2[0],setActive=_React$useState2[1],onMouseUp=function onMouseUp(){setActive(!1)},onMouseMove=function onMouseMove(event){var _window,_ref2=event||(null===(_window=window)||void 0===_window?void 0:_window.event),buttons=_ref2.buttons;if(!isActive||0===buttons)return void(isActive&&setActive(!1));var left=refState.current.x+event.pageX-refState.current.x-refState.current.delta;0>=left&&(left=0),left+scrollBarWidth>=bodyWidth&&(left=bodyWidth-scrollBarWidth),onScroll({scrollLeft:left/bodyWidth*(bodyScrollWidth+2)}),refState.current.x=event.pageX},onContainerScroll=function onContainerScroll(){var tableOffsetTop=getOffset(scrollBodyRef.current).top,tableBottomOffset=tableOffsetTop+scrollBodyRef.current.offsetHeight,currentClientOffset=container===window?document.documentElement.scrollTop+window.innerHeight:getOffset(container).top+container.clientHeight;tableBottomOffset-getScrollBarSize()<=currentClientOffset||tableOffsetTop>=currentClientOffset-offsetScroll?setScrollState(function(state){return _objectSpread(_objectSpread({},state),{},{isHiddenScrollBar:!0})}):setScrollState(function(state){return _objectSpread(_objectSpread({},state),{},{isHiddenScrollBar:!1})})},setScrollLeft=function setScrollLeft(left){setScrollState(function(state){return _objectSpread(_objectSpread({},state),{},{scrollLeft:left/bodyScrollWidth*bodyWidth||0})})};return React.useImperativeHandle(ref,function(){return{setScrollLeft:setScrollLeft}}),React.useEffect(function(){var onMouseUpListener=addEventListener(document.body,"mouseup",onMouseUp,!1),onMouseMoveListener=addEventListener(document.body,"mousemove",onMouseMove,!1);return onContainerScroll(),function(){onMouseUpListener.remove(),onMouseMoveListener.remove()}},[scrollBarWidth,isActive]),React.useEffect(function(){var onScrollListener=addEventListener(container,"scroll",onContainerScroll,!1),onResizeListener=addEventListener(window,"resize",onContainerScroll,!1);return function(){onScrollListener.remove(),onResizeListener.remove()}},[container]),React.useEffect(function(){scrollState.isHiddenScrollBar||setScrollState(function(state){var _scrollBodyRef$curren3,_scrollBodyRef$curren4;return _objectSpread(_objectSpread({},state),{},{scrollLeft:scrollBodyRef.current.scrollLeft/(null===(_scrollBodyRef$curren3=scrollBodyRef.current)||void 0===_scrollBodyRef$curren3?void 0:_scrollBodyRef$curren3.scrollWidth)*(null===(_scrollBodyRef$curren4=scrollBodyRef.current)||void 0===_scrollBodyRef$curren4?void 0:_scrollBodyRef$curren4.clientWidth)})})},[scrollState.isHiddenScrollBar]),bodyScrollWidth<=bodyWidth||!scrollBarWidth||scrollState.isHiddenScrollBar?null:React.createElement("div",{style:{height:getScrollBarSize(),width:bodyWidth,bottom:offsetScroll},className:"".concat(prefixCls,"-sticky-scroll")},React.createElement("div",{onMouseDown:function onMouseDown(event){event.persist(),refState.current.delta=event.pageX-scrollState.scrollLeft,refState.current.x=0,setActive(!0),event.preventDefault()},ref:scrollBarRef,className:classNames("".concat(prefixCls,"-sticky-scroll-bar"),_defineProperty({},"".concat(prefixCls,"-sticky-scroll-bar-active"),isActive)),style:{width:"".concat(scrollBarWidth,"px"),transform:"translate3d(".concat(scrollState.scrollLeft,"px, 0, 0)")}}))};export default React.forwardRef(StickyScrollBar);