import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import _defineProperty from"/node_modules/@babel/runtime/helpers/esm/defineProperty.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import _toConsumableArray from"/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js";import _objectWithoutProperties from"/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js";import React from"c:\\node_modules\\react\\index.js";import{useMemo}from"c:\\node_modules\\react\\index.js";import classNames from"/node_modules/classnames.js";import{fillRef}from"/node_modules/rc-util/es/ref.js";import Header from"/node_modules/rc-table/es/Header/Header.js";import ColGroup from"/node_modules/rc-table/es/ColGroup.js";import TableContext from"/node_modules/rc-table/es/context/TableContext.js";function useColumnWidth(colWidths,columCount){return useMemo(function(){for(var val,cloneColumns=[],i=0;i<columCount;i+=1)if(val=colWidths[i],void 0!==val)cloneColumns[i]=val;else return null;return cloneColumns},[colWidths.join("_"),columCount])}var FixedHeader=React.forwardRef(function(_ref,ref){var noData=_ref.noData,columns=_ref.columns,flattenColumns=_ref.flattenColumns,colWidths=_ref.colWidths,columCount=_ref.columCount,stickyOffsets=_ref.stickyOffsets,direction=_ref.direction,fixHeader=_ref.fixHeader,offsetHeader=_ref.offsetHeader,stickyClassName=_ref.stickyClassName,onScroll=_ref.onScroll,props=_objectWithoutProperties(_ref,["noData","columns","flattenColumns","colWidths","columCount","stickyOffsets","direction","fixHeader","offsetHeader","stickyClassName","onScroll"]),_React$useContext=React.useContext(TableContext),prefixCls=_React$useContext.prefixCls,scrollbarSize=_React$useContext.scrollbarSize,isSticky=_React$useContext.isSticky,combinationScrollBarSize=isSticky&&!fixHeader?0:scrollbarSize,scrollRef=React.useRef(null),setScrollRef=React.useCallback(function(element){fillRef(ref,element),fillRef(scrollRef,element)},[]);React.useEffect(function(){function onWheel(e){var currentTarget=e.currentTarget,deltaX=e.deltaX;deltaX&&(onScroll({currentTarget:currentTarget,scrollLeft:currentTarget.scrollLeft+deltaX}),e.preventDefault())}var _scrollRef$current;return null===(_scrollRef$current=scrollRef.current)||void 0===_scrollRef$current?void 0:_scrollRef$current.addEventListener("wheel",onWheel),function(){var _scrollRef$current2;null===(_scrollRef$current2=scrollRef.current)||void 0===_scrollRef$current2?void 0:_scrollRef$current2.removeEventListener("wheel",onWheel)}},[]);var lastColumn=flattenColumns[flattenColumns.length-1],ScrollBarColumn={fixed:lastColumn?lastColumn.fixed:null,onHeaderCell:function onHeaderCell(){return{className:"".concat(prefixCls,"-cell-scrollbar")}}},columnsWithScrollbar=useMemo(function(){return combinationScrollBarSize?[].concat(_toConsumableArray(columns),[ScrollBarColumn]):columns},[combinationScrollBarSize,columns]),flattenColumnsWithScrollbar=useMemo(function(){return combinationScrollBarSize?[].concat(_toConsumableArray(flattenColumns),[ScrollBarColumn]):flattenColumns},[combinationScrollBarSize,flattenColumns]),headerStickyOffsets=useMemo(function(){var right=stickyOffsets.right,left=stickyOffsets.left;return _objectSpread(_objectSpread({},stickyOffsets),{},{left:"rtl"===direction?[].concat(_toConsumableArray(left.map(function(width){return width+combinationScrollBarSize})),[0]):left,right:"rtl"===direction?right:[].concat(_toConsumableArray(right.map(function(width){return width+combinationScrollBarSize})),[0]),isSticky:isSticky})},[combinationScrollBarSize,stickyOffsets,isSticky]),mergedColumnWidth=useColumnWidth(colWidths,columCount);return React.createElement("div",{style:_objectSpread({overflow:"hidden"},isSticky?{top:offsetHeader}:{}),ref:setScrollRef,className:classNames("".concat(prefixCls,"-header"),_defineProperty({},stickyClassName,!!stickyClassName))},React.createElement("table",{style:{tableLayout:"fixed",visibility:noData||mergedColumnWidth?null:"hidden"}},React.createElement(ColGroup,{colWidths:mergedColumnWidth?[].concat(_toConsumableArray(mergedColumnWidth),[combinationScrollBarSize]):[],columCount:columCount+1,columns:flattenColumnsWithScrollbar}),React.createElement(Header,_extends({},props,{stickyOffsets:headerStickyOffsets,columns:columnsWithScrollbar,flattenColumns:flattenColumnsWithScrollbar}))))});FixedHeader.displayName="FixedHeader";export default FixedHeader;