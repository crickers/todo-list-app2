import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import React from"c:\\node_modules\\react\\index.js";import classNames from"/node_modules/classnames.js";import Cell from"/node_modules/rc-table/es/Cell.js";import TableContext from"/node_modules/rc-table/es/context/TableContext.js";import BodyContext from"/node_modules/rc-table/es/context/BodyContext.js";import{getColumnsKey}from"/node_modules/rc-table/es/utils/valueUtil.js";import ExpandedRow from"/node_modules/rc-table/es/Body/ExpandedRow.js";function BodyRow(props){var className=props.className,style=props.style,record=props.record,index=props.index,rowKey=props.rowKey,getRowKey=props.getRowKey,rowExpandable=props.rowExpandable,expandedKeys=props.expandedKeys,onRow=props.onRow,_props$indent=props.indent,indent=void 0===_props$indent?0:_props$indent,RowComponent=props.rowComponent,cellComponent=props.cellComponent,childrenColumnName=props.childrenColumnName,_React$useContext=React.useContext(TableContext),prefixCls=_React$useContext.prefixCls,fixedInfoList=_React$useContext.fixedInfoList,_React$useContext2=React.useContext(BodyContext),fixHeader=_React$useContext2.fixHeader,fixColumn=_React$useContext2.fixColumn,horizonScroll=_React$useContext2.horizonScroll,componentWidth=_React$useContext2.componentWidth,flattenColumns=_React$useContext2.flattenColumns,expandableType=_React$useContext2.expandableType,expandRowByClick=_React$useContext2.expandRowByClick,onTriggerExpand=_React$useContext2.onTriggerExpand,rowClassName=_React$useContext2.rowClassName,expandedRowClassName=_React$useContext2.expandedRowClassName,indentSize=_React$useContext2.indentSize,expandIcon=_React$useContext2.expandIcon,expandedRowRender=_React$useContext2.expandedRowRender,expandIconColumnIndex=_React$useContext2.expandIconColumnIndex,_React$useState=React.useState(!1),_React$useState2=_slicedToArray(_React$useState,2),expandRended=_React$useState2[0],setExpandRended=_React$useState2[1],expanded=expandedKeys&&expandedKeys.has(props.recordKey);React.useEffect(function(){expanded&&setExpandRended(!0)},[expanded]);var additionalProps,rowSupportExpand="row"===expandableType&&(!rowExpandable||rowExpandable(record)),nestExpandable="nest"===expandableType,hasNestChildren=childrenColumnName&&record&&record[childrenColumnName];onRow&&(additionalProps=onRow(record,index));var computeRowClassName,onClick=function onClick(event){if(expandRowByClick&&(rowSupportExpand||nestExpandable)&&onTriggerExpand(record,event),additionalProps&&additionalProps.onClick){for(var _additionalProps,_len=arguments.length,args=Array(1<_len?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];(_additionalProps=additionalProps).onClick.apply(_additionalProps,[event].concat(args))}};"string"==typeof rowClassName?computeRowClassName=rowClassName:"function"==typeof rowClassName&&(computeRowClassName=rowClassName(record,index,indent));var expandRowNode,columnsKey=getColumnsKey(flattenColumns),baseRowNode=React.createElement(RowComponent,_extends({},additionalProps,{"data-row-key":rowKey,className:classNames(className,"".concat(prefixCls,"-row"),"".concat(prefixCls,"-row-level-").concat(indent),computeRowClassName,additionalProps&&additionalProps.className),style:_objectSpread(_objectSpread({},style),additionalProps?additionalProps.style:null),onClick:onClick}),flattenColumns.map(function(column,colIndex){var appendCellNode,render=column.render,dataIndex=column.dataIndex,columnClassName=column.className,key=columnsKey[colIndex],fixedInfo=fixedInfoList[colIndex];colIndex===(expandIconColumnIndex||0)&&nestExpandable&&(appendCellNode=React.createElement(React.Fragment,null,React.createElement("span",{style:{paddingLeft:"".concat(indentSize*indent,"px")},className:"".concat(prefixCls,"-row-indent indent-level-").concat(indent)}),expandIcon({prefixCls:prefixCls,expanded:expanded,expandable:hasNestChildren,record:record,onExpand:onTriggerExpand})));var additionalCellProps;return column.onCell&&(additionalCellProps=column.onCell(record,index)),React.createElement(Cell,_extends({className:columnClassName,ellipsis:column.ellipsis,align:column.align,component:cellComponent,prefixCls:prefixCls,key:key,record:record,index:index,dataIndex:dataIndex,render:render,shouldCellUpdate:column.shouldCellUpdate},fixedInfo,{appendNode:appendCellNode,additionalProps:additionalCellProps}))}));if(rowSupportExpand&&(expandRended||expanded)){var expandContent=expandedRowRender(record,index,indent+1,expanded),computedExpandedRowClassName=expandedRowClassName&&expandedRowClassName(record,index,indent);expandRowNode=React.createElement(ExpandedRow,{expanded:expanded,className:classNames("".concat(prefixCls,"-expanded-row"),"".concat(prefixCls,"-expanded-row-level-").concat(indent+1),computedExpandedRowClassName),prefixCls:prefixCls,fixHeader:fixHeader,fixColumn:fixColumn,horizonScroll:horizonScroll,component:RowComponent,componentWidth:componentWidth,cellComponent:cellComponent,colSpan:flattenColumns.length},expandContent)}var nestRowNode;return hasNestChildren&&expanded&&(nestRowNode=(record[childrenColumnName]||[]).map(function(subRecord,subIndex){var subKey=getRowKey(subRecord,subIndex);return React.createElement(BodyRow,_extends({},props,{key:subKey,rowKey:subKey,record:subRecord,recordKey:subKey,index:subIndex,indent:indent+1}))})),React.createElement(React.Fragment,null,baseRowNode,expandRowNode,nestRowNode)}BodyRow.displayName="BodyRow";export default BodyRow;