import _typeof from"/node_modules/@babel/runtime/helpers/esm/typeof.js";import React from"c:\\node_modules\\react\\index.js";import warning,{noteOnce}from"/node_modules/rc-util/es/warning.js";import toNodeArray from"/node_modules/rc-util/es/Children/toArray.js";import{convertChildrenToData}from"/node_modules/rc-select/es/utils/legacyUtil.js";import{toArray}from"/node_modules/rc-select/es/utils/commonUtil.js";function warningProps(props){var mode=props.mode,options=props.options,children=props.children,backfill=props.backfill,allowClear=props.allowClear,placeholder=props.placeholder,getInputElement=props.getInputElement,showSearch=props.showSearch,onSearch=props.onSearch,defaultOpen=props.defaultOpen,autoFocus=props.autoFocus,labelInValue=props.labelInValue,value=props.value,inputValue=props.inputValue,optionLabelProp=props.optionLabelProp,multiple="multiple"===mode||"tags"===mode,mergedShowSearch=void 0===showSearch?multiple||"combobox"===mode:showSearch,mergedOptions=options||convertChildrenToData(children);if(warning("tags"!==mode||mergedOptions.every(function(opt){return!opt.disabled}),"Please avoid setting option to disabled in tags mode since user can always type text as tag."),"tags"===mode||"combobox"===mode){var hasNumberValue=mergedOptions.some(function(item){return item.options?item.options.some(function(opt){return"number"==typeof("value"in opt?opt.value:opt.key)}):"number"==typeof("value"in item?item.value:item.key)});warning(!hasNumberValue,"`value` of Option should not use number type when `mode` is `tags` or `combobox`.")}if(warning("combobox"!==mode||!optionLabelProp,"`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly."),warning("combobox"===mode||!backfill,"`backfill` only works with `combobox` mode."),warning("combobox"===mode||!getInputElement,"`getInputElement` only work with `combobox` mode."),noteOnce("combobox"!==mode||!getInputElement||!allowClear||!placeholder,"Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`."),onSearch&&!mergedShowSearch&&"combobox"!==mode&&"tags"!==mode&&warning(!1,"`onSearch` should work with `showSearch` instead of use alone."),noteOnce(!defaultOpen||autoFocus,"`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed."),void 0!==value&&null!==value){var values=toArray(value);warning(!labelInValue||values.every(function(val){return"object"===_typeof(val)&&("key"in val||"value"in val)}),"`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`"),warning(!multiple||Array.isArray(value),"`value` should be array when `mode` is `multiple` or `tags`")}if(children){var invalidateChildType=null;toNodeArray(children).some(function(node){if(!React.isValidElement(node)||!node.type)return!1;var type=node.type;if(type.isSelectOption)return!1;if(type.isSelectOptGroup){var allChildrenValid=toNodeArray(node.props.children).every(function(subNode){return!(React.isValidElement(subNode)&&node.type&&!subNode.type.isSelectOption)||(invalidateChildType=subNode.type,!1)});return!allChildrenValid}return invalidateChildType=type,!0}),invalidateChildType&&warning(!1,"`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(invalidateChildType.displayName||invalidateChildType.name||invalidateChildType,"`.")),warning(void 0===inputValue,"`inputValue` is deprecated, please use `searchValue` instead.")}}export default warningProps;