import"/node_modules/core-js/modules/es.object.assign.js";import"/node_modules/core-js/modules/es.promise.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import React from"c:\\node_modules\\react\\index.js";import{useRef,useState}from"c:\\node_modules\\react\\index.js";import Align from"/node_modules/rc-align.js";import CSSMotion from"/node_modules/rc-motion.js";import classNames from"/node_modules/classnames.js";import useVisibleStatus from"/node_modules/rc-trigger/es/Popup/useVisibleStatus.js";import{getMotion}from"/node_modules/rc-trigger/es/utils/legacyUtil.js";import useStretchStyle from"/node_modules/rc-trigger/es/Popup/useStretchStyle.js";var PopupInner=React.forwardRef(function(props,ref){function getAlignTarget(){return point?point:getRootDomNode}function forceAlign(){var _alignRef$current;null===(_alignRef$current=alignRef.current)||void 0===_alignRef$current?void 0:_alignRef$current.forceAlign()}function onInternalAlign(popupDomNode,matchAlign){if("align"===status){var nextAlignedClassName=getClassNameFromAlign(matchAlign);setAlignedClassName(nextAlignedClassName),alignedClassName===nextAlignedClassName?goNextStatus(function(){var _prepareResolveRef$cu;null===(_prepareResolveRef$cu=prepareResolveRef.current)||void 0===_prepareResolveRef$cu?void 0:_prepareResolveRef$cu.call(prepareResolveRef)}):Promise.resolve().then(function(){forceAlign()}),null===onAlign||void 0===onAlign?void 0:onAlign(popupDomNode,matchAlign)}}function onShowPrepare(){return new Promise(function(resolve){prepareResolveRef.current=resolve})}var visible=props.visible,prefixCls=props.prefixCls,className=props.className,style=props.style,children=props.children,zIndex=props.zIndex,stretch=props.stretch,destroyPopupOnHide=props.destroyPopupOnHide,align=props.align,point=props.point,getRootDomNode=props.getRootDomNode,getClassNameFromAlign=props.getClassNameFromAlign,onAlign=props.onAlign,onMouseEnter=props.onMouseEnter,onMouseLeave=props.onMouseLeave,onMouseDown=props.onMouseDown,onTouchStart=props.onTouchStart,alignRef=useRef(),elementRef=useRef(),_useState=useState(),_useState2=_slicedToArray(_useState,2),alignedClassName=_useState2[0],setAlignedClassName=_useState2[1],_useStretchStyle=useStretchStyle(stretch),_useStretchStyle2=_slicedToArray(_useStretchStyle,2),stretchStyle=_useStretchStyle2[0],measureStretchStyle=_useStretchStyle2[1],_useVisibleStatus=useVisibleStatus(visible,function doMeasure(){stretch&&measureStretchStyle(getRootDomNode())}),_useVisibleStatus2=_slicedToArray(_useVisibleStatus,2),status=_useVisibleStatus2[0],goNextStatus=_useVisibleStatus2[1],prepareResolveRef=useRef(),motion=_objectSpread({},getMotion(props));["onAppearEnd","onEnterEnd","onLeaveEnd"].forEach(function(eventName){var originHandler=motion[eventName];motion[eventName]=function(element,event){return goNextStatus(),null===originHandler||void 0===originHandler?void 0:originHandler(element,event)}}),React.useEffect(function(){motion.motionName||"motion"!==status||goNextStatus()},[motion.motionName,status]),React.useImperativeHandle(ref,function(){return{forceAlign:forceAlign,getElement:function getElement(){return elementRef.current}}});var mergedStyle=_objectSpread(_objectSpread(_objectSpread({},stretchStyle),{},{zIndex:zIndex},style),{},{opacity:"motion"!==status&&"stable"!==status&&visible?0:void 0,pointerEvents:"stable"===status?void 0:"none"}),alignDisabled=!0;(null===align||void 0===align?void 0:align.points)&&("align"===status||"stable"===status)&&(alignDisabled=!1);var childNode=children;return 1<React.Children.count(children)&&(childNode=React.createElement("div",{className:"".concat(prefixCls,"-content")},children)),React.createElement(CSSMotion,Object.assign({visible:visible,ref:elementRef,leavedClassName:"".concat(prefixCls,"-hidden")},motion,{onAppearPrepare:onShowPrepare,onEnterPrepare:onShowPrepare,removeOnLeave:destroyPopupOnHide}),function(_ref,motionRef){var motionClassName=_ref.className,motionStyle=_ref.style,mergedClassName=classNames(prefixCls,className,alignedClassName,motionClassName);return React.createElement(Align,{target:getAlignTarget(),key:"popup",ref:alignRef,monitorWindowResize:!0,disabled:alignDisabled,align:align,onAlign:onInternalAlign},React.createElement("div",{ref:motionRef,className:mergedClassName,onMouseEnter:onMouseEnter,onMouseLeave:onMouseLeave,onMouseDown:onMouseDown,onTouchStart:onTouchStart,style:_objectSpread(_objectSpread({},motionStyle),mergedStyle)},childNode))})});PopupInner.displayName="PopupInner";export default PopupInner;