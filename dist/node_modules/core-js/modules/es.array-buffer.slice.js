'use strict';import $ from"/node_modules/core-js/internals/export.js";import fails from"/node_modules/core-js/internals/fails.js";import ArrayBufferModule from"/node_modules/core-js/internals/array-buffer.js";import anObject from"/node_modules/core-js/internals/an-object.js";import toAbsoluteIndex from"/node_modules/core-js/internals/to-absolute-index.js";import toLength from"/node_modules/core-js/internals/to-length.js";import speciesConstructor from"/node_modules/core-js/internals/species-constructor.js";var ArrayBuffer=ArrayBufferModule.ArrayBuffer,DataView=ArrayBufferModule.DataView,nativeArrayBufferSlice=ArrayBuffer.prototype.slice,INCORRECT_SLICE=fails(function(){return!new ArrayBuffer(2).slice(1,void 0).byteLength});$({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:INCORRECT_SLICE},{slice:function slice(start,end){if(nativeArrayBufferSlice!==void 0&&end===void 0)return nativeArrayBufferSlice.call(anObject(this),start);for(var length=anObject(this).byteLength,first=toAbsoluteIndex(start,length),fin=toAbsoluteIndex(void 0===end?length:end,length),result=new(speciesConstructor(this,ArrayBuffer))(toLength(fin-first)),viewSource=new DataView(this),viewTarget=new DataView(result),index=0;first<fin;)viewTarget.setUint8(index++,viewSource.getUint8(first++));return result}});