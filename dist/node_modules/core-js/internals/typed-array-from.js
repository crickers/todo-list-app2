import toObject from"/node_modules/core-js/internals/to-object.js";import toLength from"/node_modules/core-js/internals/to-length.js";import getIteratorMethod from"/node_modules/core-js/internals/get-iterator-method.js";import isArrayIteratorMethod from"/node_modules/core-js/internals/is-array-iterator-method.js";import bind from"/node_modules/core-js/internals/function-bind-context.js";import _ref2 from"/node_modules/core-js/internals/array-buffer-view-core.js";const _ref={exports:{}};(function(module,exports){var aTypedArrayConstructor=_ref2.aTypedArrayConstructor;module.exports=function from(source){var i,length,result,step,iterator,next,O=toObject(source),argumentsLength=arguments.length,mapfn=1<argumentsLength?arguments[1]:void 0,mapping=mapfn!==void 0,iteratorMethod=getIteratorMethod(O);if(iteratorMethod!=null&&!isArrayIteratorMethod(iteratorMethod))for(iterator=iteratorMethod.call(O),next=iterator.next,O=[];!(step=next.call(iterator)).done;)O.push(step.value);for(mapping&&2<argumentsLength&&(mapfn=bind(mapfn,arguments[2],2)),length=toLength(O.length),result=new(aTypedArrayConstructor(this))(length),i=0;length>i;i++)result[i]=mapping?mapfn(O[i],i):O[i];return result}})(_ref,_ref.exports);export default _ref.exports;