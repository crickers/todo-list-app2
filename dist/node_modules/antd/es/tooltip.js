import"/node_modules/core-js/modules/es.array.index-of.js";import"/node_modules/core-js/modules/es.regexp.constructor.js";import"/node_modules/core-js/modules/es.regexp.to-string.js";import _defineProperty from"/node_modules/@babel/runtime/helpers/esm/defineProperty.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import React from"c:\\node_modules\\react\\index.js";import RcTooltip from"/node_modules/rc-tooltip.js";import classNames from"/node_modules/classnames.js";import getPlacements from"/node_modules/antd/es/tooltip/placements.js";import{cloneElement,isValidElement}from"/node_modules/antd/es/_util/reactNode.js";import{ConfigContext}from"/node_modules/antd/es/config-provider.js";import{PresetColorTypes}from"/node_modules/antd/es/_util/colors.js";var splitObject=function splitObject(obj,keys){var picked={},omitted=_extends({},obj);return keys.forEach(function(key){obj&&key in obj&&(picked[key]=obj[key],delete omitted[key])}),{picked:picked,omitted:omitted}},PresetColorRegex=new RegExp("^(".concat(PresetColorTypes.join("|"),")(-inverse)?$"));function getDisabledCompatibleChildren(element,prefixCls){var elementType=element.type;if((!0===elementType.__ANT_BUTTON||!0===elementType.__ANT_SWITCH||!0===elementType.__ANT_CHECKBOX||"button"===element.type)&&element.props.disabled){var _splitObject=splitObject(element.props.style,["position","left","right","top","bottom","float","display","zIndex"]),picked=_splitObject.picked,omitted=_splitObject.omitted,spanStyle=_extends(_extends({display:"inline-block"},picked),{cursor:"not-allowed",width:element.props.block?"100%":null}),buttonStyle=_extends(_extends({},omitted),{pointerEvents:"none"}),child=cloneElement(element,{style:buttonStyle,className:null});return React.createElement("span",{style:spanStyle,className:classNames(element.props.className,"".concat(prefixCls,"-disabled-compatible-wrapper"))},child)}return element}var Tooltip=React.forwardRef(function(props,ref){var _classNames2,_React$useContext=React.useContext(ConfigContext),getContextPopupContainer=_React$useContext.getPopupContainer,getPrefixCls=_React$useContext.getPrefixCls,direction=_React$useContext.direction,_React$useState=React.useState(!!props.visible||!!props.defaultVisible),_React$useState2=_slicedToArray(_React$useState,2),visible=_React$useState2[0],setVisible=_React$useState2[1];React.useEffect(function(){"visible"in props&&setVisible(props.visible)},[props.visible]);var isNoTitle=function isNoTitle(){var title=props.title,overlay=props.overlay;return!title&&!overlay&&0!==title},onVisibleChange=function onVisibleChange(vis){"visible"in props||setVisible(!isNoTitle()&&vis),props.onVisibleChange&&!isNoTitle()&&props.onVisibleChange(vis)},getTooltipPlacements=function getTooltipPlacements(){var builtinPlacements=props.builtinPlacements,arrowPointAtCenter=props.arrowPointAtCenter,autoAdjustOverflow=props.autoAdjustOverflow;return builtinPlacements||getPlacements({arrowPointAtCenter:arrowPointAtCenter,autoAdjustOverflow:autoAdjustOverflow})},customizePrefixCls=props.prefixCls,openClassName=props.openClassName,getPopupContainer=props.getPopupContainer,getTooltipContainer=props.getTooltipContainer,overlayClassName=props.overlayClassName,color=props.color,overlayInnerStyle=props.overlayInnerStyle,children=props.children,prefixCls=getPrefixCls("tooltip",customizePrefixCls),tempVisible=visible;!("visible"in props)&&isNoTitle()&&(tempVisible=!1);var arrowContentStyle,child=getDisabledCompatibleChildren(isValidElement(children)?children:React.createElement("span",null,children),prefixCls),childProps=child.props,childCls=classNames(childProps.className,_defineProperty({},openClassName||"".concat(prefixCls,"-open"),!0)),customOverlayClassName=classNames(overlayClassName,(_classNames2={},_defineProperty(_classNames2,"".concat(prefixCls,"-rtl"),"rtl"===direction),_defineProperty(_classNames2,"".concat(prefixCls,"-").concat(color),color&&PresetColorRegex.test(color)),_classNames2)),formattedOverlayInnerStyle=overlayInnerStyle;return color&&!PresetColorRegex.test(color)&&(formattedOverlayInnerStyle=_extends(_extends({},overlayInnerStyle),{background:color}),arrowContentStyle={background:color}),React.createElement(RcTooltip,_extends({},props,{prefixCls:prefixCls,overlayClassName:customOverlayClassName,getTooltipContainer:getPopupContainer||getTooltipContainer||getContextPopupContainer,ref:ref,builtinPlacements:getTooltipPlacements(),overlay:function getOverlay(){var title=props.title,overlay=props.overlay;return 0===title?title:overlay||title||""}(),visible:tempVisible,onVisibleChange:onVisibleChange,onPopupAlign:function onPopupAlign(domNode,align){var placements=getTooltipPlacements(),placement=Object.keys(placements).filter(function(key){return placements[key].points[0]===align.points[0]&&placements[key].points[1]===align.points[1]})[0];if(placement){var rect=domNode.getBoundingClientRect(),transformOrigin={top:"50%",left:"50%"};0<=placement.indexOf("top")||0<=placement.indexOf("Bottom")?transformOrigin.top="".concat(rect.height-align.offset[1],"px"):(0<=placement.indexOf("Top")||0<=placement.indexOf("bottom"))&&(transformOrigin.top="".concat(-align.offset[1],"px")),0<=placement.indexOf("left")||0<=placement.indexOf("Right")?transformOrigin.left="".concat(rect.width-align.offset[0],"px"):(0<=placement.indexOf("right")||0<=placement.indexOf("Left"))&&(transformOrigin.left="".concat(-align.offset[0],"px")),domNode.style.transformOrigin="".concat(transformOrigin.left," ").concat(transformOrigin.top)}},overlayInnerStyle:formattedOverlayInnerStyle,arrowContent:React.createElement("span",{className:"".concat(prefixCls,"-arrow-content"),style:arrowContentStyle})}),tempVisible?cloneElement(child,{className:childCls}):child)});Tooltip.displayName="Tooltip",Tooltip.defaultProps={placement:"top",transitionName:"zoom-big-fast",mouseEnterDelay:.1,mouseLeaveDelay:.1,arrowPointAtCenter:!1,autoAdjustOverflow:!0};export default Tooltip;