import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import _typeof from"/node_modules/@babel/runtime/helpers/esm/typeof.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import React from"c:\\node_modules\\react\\index.js";import toArray from"/node_modules/rc-util/es/Children/toArray.js";import classNames from"/node_modules/classnames.js";import omit from"/node_modules/rc-util/es/omit.js";import Select from"/node_modules/antd/es/select.js";import{ConfigConsumer}from"/node_modules/antd/es/config-provider.js";import devWarning from"/node_modules/antd/es/_util/devWarning.js";import{isValidElement}from"/node_modules/antd/es/_util/reactNode.js";var Option=Select.Option;function isSelectOptionOrSelectOptGroup(child){return child&&child.type&&(child.type.isSelectOption||child.type.isSelectOptGroup)}var AutoComplete=function AutoComplete(props,ref){var customizeInput,customizePrefixCls=props.prefixCls,className=props.className,children=props.children,dataSource=props.dataSource,childNodes=toArray(children);if(1===childNodes.length&&isValidElement(childNodes[0])&&!isSelectOptionOrSelectOptGroup(childNodes[0])){var _childNodes=_slicedToArray(childNodes,1);customizeInput=_childNodes[0]}var optionChildren,getInputElement=customizeInput?function(){return customizeInput}:void 0;return optionChildren=childNodes.length&&isSelectOptionOrSelectOptGroup(childNodes[0])?children:dataSource?dataSource.map(function(item){if(isValidElement(item))return item;switch(_typeof(item)){case"string":return React.createElement(Option,{key:item,value:item},item);case"object":{var optionValue=item.value;return React.createElement(Option,{key:optionValue,value:optionValue},item.text)}default:throw new Error("AutoComplete[dataSource] only supports type `string[] | Object[]`.");}}):[],React.useEffect(function(){devWarning(!("dataSource"in props),"AutoComplete","`dataSource` is deprecated, please use `options` instead."),devWarning(!customizeInput||!("size"in props),"AutoComplete","You need to control style self instead of setting `size` when using customize input.")},[]),React.createElement(ConfigConsumer,null,function(_ref){var getPrefixCls=_ref.getPrefixCls,prefixCls=getPrefixCls("select",customizePrefixCls);return React.createElement(Select,_extends({ref:ref},omit(props,["dataSource"]),{prefixCls:prefixCls,className:classNames("".concat(prefixCls,"-auto-complete"),className),mode:Select.SECRET_COMBOBOX_MODE_DO_NOT_USE},{getInputElement:getInputElement}),optionChildren)})},RefAutoComplete=React.forwardRef(AutoComplete);RefAutoComplete.Option=Option;export default RefAutoComplete;