import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import React from"c:\\node_modules\\react\\index.js";import classNames from"/node_modules/classnames.js";import LoadingOutlined from"/node_modules/@ant-design/icons/es/icons/LoadingOutlined.js";import CloseCircleFilled from"/node_modules/@ant-design/icons/es/icons/CloseCircleFilled.js";import CheckCircleFilled from"/node_modules/@ant-design/icons/es/icons/CheckCircleFilled.js";import ExclamationCircleFilled from"/node_modules/@ant-design/icons/es/icons/ExclamationCircleFilled.js";import Col from"/node_modules/antd/es/grid/col.js";import{FormContext,FormItemPrefixContext}from"/node_modules/antd/es/form/context.js";import ErrorList from"/node_modules/antd/es/form/ErrorList.js";var iconMap={success:CheckCircleFilled,warning:ExclamationCircleFilled,error:CloseCircleFilled,validating:LoadingOutlined},FormItemInput=function FormItemInput(props){var prefixCls=props.prefixCls,status=props.status,wrapperCol=props.wrapperCol,children=props.children,help=props.help,errors=props.errors,onDomErrorVisibleChange=props.onDomErrorVisibleChange,hasFeedback=props.hasFeedback,formItemRender=props._internalItemRender,validateStatus=props.validateStatus,extra=props.extra,baseClassName="".concat(prefixCls,"-item"),formContext=React.useContext(FormContext),mergedWrapperCol=wrapperCol||formContext.wrapperCol||{},className=classNames("".concat(baseClassName,"-control"),mergedWrapperCol.className);React.useEffect(function(){return function(){onDomErrorVisibleChange(!1)}},[]);var IconNode=validateStatus&&iconMap[validateStatus],icon=hasFeedback&&IconNode?React.createElement("span",{className:"".concat(baseClassName,"-children-icon")},React.createElement(IconNode,null)):null,subFormContext=_extends({},formContext);delete subFormContext.labelCol,delete subFormContext.wrapperCol;var inputDom=React.createElement("div",{className:"".concat(baseClassName,"-control-input")},React.createElement("div",{className:"".concat(baseClassName,"-control-input-content")},children),icon),errorListDom=React.createElement(FormItemPrefixContext.Provider,{value:{prefixCls:prefixCls,status:status}},React.createElement(ErrorList,{errors:errors,help:help,onDomErrorVisibleChange:onDomErrorVisibleChange})),extraDom=extra?React.createElement("div",{className:"".concat(baseClassName,"-extra")},extra):null,dom=formItemRender&&"pro_table_render"===formItemRender.mark&&formItemRender.render?formItemRender.render(props,{input:inputDom,errorList:errorListDom,extra:extraDom}):React.createElement(React.Fragment,null,inputDom,errorListDom,extraDom);return React.createElement(FormContext.Provider,{value:subFormContext},React.createElement(Col,_extends({},mergedWrapperCol,{className:className}),dom))};export default FormItemInput;