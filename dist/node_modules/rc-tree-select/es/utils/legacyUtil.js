import"/node_modules/core-js/modules/es.array.index-of.js";import"/node_modules/core-js/modules/es.array.sort.js";import"/node_modules/core-js/modules/es.object.assign.js";import"/node_modules/core-js/modules/es.string.includes.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import _objectWithoutProperties from"/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js";import React from"c:\\node_modules\\react\\index.js";import toArray from"/node_modules/rc-util/es/Children/toArray.js";import warning from"/node_modules/rc-util/es/warning.js";import TreeNode from"/node_modules/rc-tree-select/es/TreeNode.js";export function convertChildrenToData(nodes){return toArray(nodes).map(function(node){if(!React.isValidElement(node)||!node.type)return null;var key=node.key,_node$props=node.props,children=_node$props.children,value=_node$props.value,restProps=_objectWithoutProperties(_node$props,["children","value"]),data=_objectSpread({key:key,value:value},restProps),childData=convertChildrenToData(children);return childData.length&&(data.children=childData),data}).filter(function(data){return data})}export function fillLegacyProps(dataNode){if(!dataNode)return dataNode;var cloneNode=_objectSpread({},dataNode);return"props"in cloneNode||Object.defineProperty(cloneNode,"props",{get:function get(){return warning(!1,"New `rc-tree-select` not support return node instance as argument anymore. Please consider to remove `props` access."),cloneNode}}),cloneNode}export function fillAdditionalInfo(extra,triggerValue,checkedValues,treeData,showPosition){function generateMap(){function dig(list){var level=1<arguments.length&&arguments[1]!==void 0?arguments[1]:"0",parentIncluded=!!(2<arguments.length&&arguments[2]!==void 0)&&arguments[2];return list.map(function(dataNode,index){var pos="".concat(level,"-").concat(index),included=checkedValues.includes(dataNode.value),children=dig(dataNode.children||[],pos,included),node=React.createElement(TreeNode,Object.assign({},dataNode),children.map(function(child){return child.node}));if(triggerValue===dataNode.value&&(triggerNode=node),included){var checkedNode={pos:pos,node:node,children:children};return parentIncluded||nodeList.push(checkedNode),checkedNode}return null}).filter(function(node){return node})}nodeList||(nodeList=[],dig(treeData),nodeList.sort(function(_ref,_ref2){var val1=_ref.node.props.value,val2=_ref2.node.props.value,index1=checkedValues.indexOf(val1),index2=checkedValues.indexOf(val2);return index1-index2}))}var triggerNode=null,nodeList=null;Object.defineProperty(extra,"triggerNode",{get:function get(){return warning(!1,"`triggerNode` is deprecated. Please consider decoupling data with node."),generateMap(),triggerNode}}),Object.defineProperty(extra,"allCheckedNodes",{get:function get(){return warning(!1,"`allCheckedNodes` is deprecated. Please consider decoupling data with node."),generateMap(),showPosition?nodeList:nodeList.map(function(_ref3){var node=_ref3.node;return node})}})}