import"/node_modules/core-js/modules/es.object.assign.js";import"/node_modules/core-js/modules/es.string.includes.js";import _classCallCheck from"/node_modules/@babel/runtime/helpers/esm/classCallCheck.js";import _createClass from"/node_modules/@babel/runtime/helpers/esm/createClass.js";import _inherits from"/node_modules/@babel/runtime/helpers/esm/inherits.js";import _createSuper from"/node_modules/@babel/runtime/helpers/esm/createSuper.js";import _toConsumableArray from"/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js";import _typeof from"/node_modules/@babel/runtime/helpers/esm/typeof.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import React from"c:\\node_modules\\react\\index.js";import{useMemo}from"c:\\node_modules\\react\\index.js";import generateSelector from"/node_modules/rc-select/es/generate.js";import{getLabeledValue}from"/node_modules/rc-select/es/utils/valueUtil.js";import{convertDataToEntities}from"/node_modules/rc-tree/es/utils/treeUtil.js";import{conductCheck}from"/node_modules/rc-tree/es/utils/conductUtil.js";import{INTERNAL_PROPS_MARK}from"/node_modules/rc-select/es/interface/generator.js";import useMergedState from"/node_modules/rc-util/es/hooks/useMergedState.js";import warning from"/node_modules/rc-util/es/warning.js";import OptionList from"/node_modules/rc-tree-select/es/OptionList.js";import TreeNode from"/node_modules/rc-tree-select/es/TreeNode.js";import{flattenOptions,filterOptions,isValueDisabled,findValueOption,addValue,removeValue,getRawValueLabeled,toArray}from"/node_modules/rc-tree-select/es/utils/valueUtil.js";import warningProps from"/node_modules/rc-tree-select/es/utils/warningPropsUtil.js";import{SelectContext}from"/node_modules/rc-tree-select/es/Context.js";import useTreeData from"/node_modules/rc-tree-select/es/hooks/useTreeData.js";import useKeyValueMap from"/node_modules/rc-tree-select/es/hooks/useKeyValueMap.js";import useKeyValueMapping from"/node_modules/rc-tree-select/es/hooks/useKeyValueMapping.js";import{formatStrategyKeys,SHOW_ALL,SHOW_PARENT,SHOW_CHILD}from"/node_modules/rc-tree-select/es/utils/strategyUtil.js";import{fillAdditionalInfo}from"/node_modules/rc-tree-select/es/utils/legacyUtil.js";import useSelectValues from"/node_modules/rc-tree-select/es/hooks/useSelectValues.js";var OMIT_PROPS=["expandedKeys","treeData","treeCheckable","showCheckedStrategy","searchPlaceholder","treeLine","treeIcon","showTreeIcon","switcherIcon","treeNodeFilterProp","filterTreeNode","dropdownPopupAlign","treeDefaultExpandAll","treeCheckStrictly","treeExpandedKeys","treeLoadedKeys","treeMotion","onTreeExpand","onTreeLoad","loadData","treeDataSimpleMode","treeNodeLabelProp","treeDefaultExpandedKeys"],RefSelect=generateSelector({prefixCls:"rc-tree-select",components:{optionList:OptionList},convertChildrenToData:function convertChildrenToData(){return null},flattenOptions:flattenOptions,getLabeledValue:getLabeledValue,filterOptions:filterOptions,isValueDisabled:isValueDisabled,findValueOption:findValueOption,omitDOMProps:function omitDOMProps(props){var cloneProps=_objectSpread({},props);return OMIT_PROPS.forEach(function(prop){delete cloneProps[prop]}),cloneProps}});RefSelect.displayName="Select";var RefTreeSelect=React.forwardRef(function(props,ref){var multiple=props.multiple,treeCheckable=props.treeCheckable,treeCheckStrictly=props.treeCheckStrictly,_props$showCheckedStr=props.showCheckedStrategy,showCheckedStrategy=void 0===_props$showCheckedStr?"SHOW_CHILD":_props$showCheckedStr,labelInValue=props.labelInValue,loadData=props.loadData,treeLoadedKeys=props.treeLoadedKeys,_props$treeNodeFilter=props.treeNodeFilterProp,treeNodeFilterProp=void 0===_props$treeNodeFilter?"value":_props$treeNodeFilter,treeNodeLabelProp=props.treeNodeLabelProp,treeDataSimpleMode=props.treeDataSimpleMode,treeData=props.treeData,treeExpandedKeys=props.treeExpandedKeys,treeDefaultExpandedKeys=props.treeDefaultExpandedKeys,treeDefaultExpandAll=props.treeDefaultExpandAll,children=props.children,treeIcon=props.treeIcon,showTreeIcon=props.showTreeIcon,switcherIcon=props.switcherIcon,treeLine=props.treeLine,treeMotion=props.treeMotion,filterTreeNode=props.filterTreeNode,dropdownPopupAlign=props.dropdownPopupAlign,onChange=props.onChange,onTreeExpand=props.onTreeExpand,onTreeLoad=props.onTreeLoad,onDropdownVisibleChange=props.onDropdownVisibleChange,onSelect=props.onSelect,onDeselect=props.onDeselect,mergedCheckable=treeCheckable||treeCheckStrictly,mergedMultiple=multiple||mergedCheckable,treeConduction=treeCheckable&&!treeCheckStrictly,mergedLabelInValue=treeCheckStrictly||labelInValue,selectRef=React.useRef(null);React.useImperativeHandle(ref,function(){return{focus:selectRef.current.focus,blur:selectRef.current.blur}});var getTreeNodeTitle=function getTreeNodeTitle(node){return treeData?node.label||node.title:node.title},getTreeNodeLabelProp=function getTreeNodeLabelProp(node){return treeNodeLabelProp?node[treeNodeLabelProp]:getTreeNodeTitle(node)},mergedTreeData=useTreeData(treeData,children,{getLabelProp:getTreeNodeTitle,simpleMode:treeDataSimpleMode}),flattedOptions=useMemo(function(){return flattenOptions(mergedTreeData)},[mergedTreeData]),_useKeyValueMap=useKeyValueMap(flattedOptions),_useKeyValueMap2=_slicedToArray(_useKeyValueMap,2),cacheKeyMap=_useKeyValueMap2[0],cacheValueMap=_useKeyValueMap2[1],_useKeyValueMapping=useKeyValueMapping(cacheKeyMap,cacheValueMap),_useKeyValueMapping2=_slicedToArray(_useKeyValueMapping,2),getEntityByKey=_useKeyValueMapping2[0],getEntityByValue=_useKeyValueMapping2[1],_useMemo=useMemo(function(){return treeConduction?convertDataToEntities(mergedTreeData):{keyEntities:null}},[mergedTreeData,treeCheckable,treeCheckStrictly]),conductKeyEntities=_useMemo.keyEntities,_useMergedState=useMergedState(props.defaultValue,{value:props.value}),_useMergedState2=_slicedToArray(_useMergedState,2),value=_useMergedState2[0],setValue=_useMergedState2[1],splitRawValues=function splitRawValues(newRawValues){var missingRawValues=[],existRawValues=[];return newRawValues.forEach(function(val){getEntityByValue(val)?existRawValues.push(val):missingRawValues.push(val)}),{missingRawValues:missingRawValues,existRawValues:existRawValues}},_useMemo2=useMemo(function(){var valueHalfCheckedKeys=[],newRawValues=[];if(toArray(value).forEach(function(item){if(!(item&&"object"===_typeof(item)&&"value"in item))newRawValues.push(item);else if(item.halfChecked&&treeCheckStrictly){var entity=getEntityByValue(item.value);valueHalfCheckedKeys.push(entity?entity.key:item.value)}else newRawValues.push(item.value)}),treeConduction){var _splitRawValues=splitRawValues(newRawValues),missingRawValues=_splitRawValues.missingRawValues,existRawValues=_splitRawValues.existRawValues,keyList=existRawValues.map(function(val){return getEntityByValue(val).key}),_conductCheck=conductCheck(keyList,!0,conductKeyEntities),checkedKeys=_conductCheck.checkedKeys,halfCheckedKeys=_conductCheck.halfCheckedKeys;return[[].concat(_toConsumableArray(missingRawValues),_toConsumableArray(checkedKeys.map(function(key){return getEntityByKey(key).data.value}))),halfCheckedKeys]}return[newRawValues,valueHalfCheckedKeys]},[value,mergedMultiple,mergedLabelInValue,treeCheckable,treeCheckStrictly]),_useMemo3=_slicedToArray(_useMemo2,2),rawValues=_useMemo3[0],rawHalfCheckedKeys=_useMemo3[1],selectValues=useSelectValues(rawValues,{treeConduction:treeConduction,value:value,showCheckedStrategy:showCheckedStrategy,conductKeyEntities:conductKeyEntities,getEntityByValue:getEntityByValue,getEntityByKey:getEntityByKey,getLabelProp:getTreeNodeLabelProp}),triggerChange=function triggerChange(newRawValues,extra,source){if(setValue(mergedMultiple?newRawValues:newRawValues[0]),onChange){var eventValues=newRawValues;if(treeConduction&&"SHOW_ALL"!==showCheckedStrategy){var keyList=newRawValues.map(function(val){var entity=getEntityByValue(val);return entity?entity.key:val}),formattedKeyList=formatStrategyKeys(keyList,showCheckedStrategy,conductKeyEntities);eventValues=formattedKeyList.map(function(key){var entity=getEntityByKey(key);return entity?entity.data.value:key})}var _ref=extra||{triggerValue:void 0,selected:void 0},triggerValue=_ref.triggerValue,selected=_ref.selected,returnValues=mergedLabelInValue?getRawValueLabeled(eventValues,value,getEntityByValue,getTreeNodeLabelProp):eventValues;if(treeCheckStrictly){var halfValues=rawHalfCheckedKeys.map(function(key){var entity=getEntityByKey(key);return entity?entity.data.value:key}).filter(function(val){return!eventValues.includes(val)});returnValues=[].concat(_toConsumableArray(returnValues),_toConsumableArray(getRawValueLabeled(halfValues,value,getEntityByValue,getTreeNodeLabelProp)))}var additionalInfo={preValue:selectValues,triggerValue:triggerValue},showPosition=!0;(treeCheckStrictly||"selection"===source&&!selected)&&(showPosition=!1),fillAdditionalInfo(additionalInfo,triggerValue,newRawValues,mergedTreeData,showPosition),mergedCheckable?additionalInfo.checked=selected:additionalInfo.selected=selected,onChange(mergedMultiple?returnValues:returnValues[0],mergedLabelInValue?null:eventValues.map(function(val){var entity=getEntityByValue(val);return entity?getTreeNodeLabelProp(entity.data):null}),additionalInfo)}},onInternalDropdownVisibleChange=React.useCallback(function(open){if(onDropdownVisibleChange){var legacyParam={};Object.defineProperty(legacyParam,"documentClickClose",{get:function get(){return warning(!1,"Second param of `onDropdownVisibleChange` has been removed."),!1}}),onDropdownVisibleChange(open,legacyParam)}},[onDropdownVisibleChange]),selectProps={optionLabelProp:null,optionFilterProp:treeNodeFilterProp,dropdownAlign:dropdownPopupAlign,internalProps:{mark:INTERNAL_PROPS_MARK,onClear:function onInternalClear(){triggerChange([],null,"clear")},skipTriggerChange:!0,skipTriggerSelect:!0,onRawSelect:function onInternalSelect(selectValue,option,source){var eventValue=mergedLabelInValue?selectValue:selectValue;if(!mergedMultiple)triggerChange([selectValue],{selected:!0,triggerValue:selectValue},source);else{var newRawValues=addValue(rawValues,selectValue);if(treeConduction){var _splitRawValues2=splitRawValues(newRawValues),missingRawValues=_splitRawValues2.missingRawValues,existRawValues=_splitRawValues2.existRawValues,keyList=existRawValues.map(function(val){return getEntityByValue(val).key}),_conductCheck2=conductCheck(keyList,!0,conductKeyEntities),checkedKeys=_conductCheck2.checkedKeys;newRawValues=[].concat(_toConsumableArray(missingRawValues),_toConsumableArray(checkedKeys.map(function(key){return getEntityByKey(key).data.value})))}triggerChange(newRawValues,{selected:!0,triggerValue:selectValue},source)}onSelect&&onSelect(eventValue,option)},onRawDeselect:function onInternalDeselect(selectValue,option,source){var eventValue=mergedLabelInValue?selectValue:selectValue,newRawValues=removeValue(rawValues,selectValue);if(treeConduction){var _splitRawValues3=splitRawValues(newRawValues),missingRawValues=_splitRawValues3.missingRawValues,existRawValues=_splitRawValues3.existRawValues,keyList=existRawValues.map(function(val){return getEntityByValue(val).key}),_conductCheck3=conductCheck(keyList,{checked:!1,halfCheckedKeys:rawHalfCheckedKeys},conductKeyEntities),checkedKeys=_conductCheck3.checkedKeys;newRawValues=[].concat(_toConsumableArray(missingRawValues),_toConsumableArray(checkedKeys.map(function(key){return getEntityByKey(key).data.value})))}triggerChange(newRawValues,{selected:!1,triggerValue:selectValue},source),onDeselect&&onDeselect(eventValue,option)}}};return"filterTreeNode"in props&&(selectProps.filterOption=filterTreeNode),React.createElement(SelectContext.Provider,{value:{checkable:mergedCheckable,loadData:loadData,treeLoadedKeys:treeLoadedKeys,onTreeLoad:onTreeLoad,checkedKeys:rawValues,halfCheckedKeys:rawHalfCheckedKeys,treeDefaultExpandAll:treeDefaultExpandAll,treeExpandedKeys:treeExpandedKeys,treeDefaultExpandedKeys:treeDefaultExpandedKeys,onTreeExpand:onTreeExpand,treeIcon:treeIcon,treeMotion:treeMotion,showTreeIcon:showTreeIcon,switcherIcon:switcherIcon,treeLine:treeLine,treeNodeFilterProp:treeNodeFilterProp}},React.createElement(RefSelect,Object.assign({ref:selectRef,mode:mergedMultiple?"multiple":null},props,selectProps,{value:selectValues,labelInValue:!0,options:mergedTreeData,onChange:null,onSelect:null,onDeselect:null,onDropdownVisibleChange:onInternalDropdownVisibleChange})))}),TreeSelect=function(_React$Component){function TreeSelect(){var _this;return _classCallCheck(this,TreeSelect),_this=_super.apply(this,arguments),_this.selectRef=React.createRef(),_this.focus=function(){_this.selectRef.current.focus()},_this.blur=function(){_this.selectRef.current.blur()},_this}_inherits(TreeSelect,_React$Component);var _super=_createSuper(TreeSelect);return _createClass(TreeSelect,[{key:"render",value:function render(){return React.createElement(RefTreeSelect,Object.assign({ref:this.selectRef},this.props))}}]),TreeSelect}(React.Component);TreeSelect.TreeNode=TreeNode,TreeSelect.SHOW_ALL=SHOW_ALL,TreeSelect.SHOW_PARENT=SHOW_PARENT,TreeSelect.SHOW_CHILD=SHOW_CHILD;export default TreeSelect;