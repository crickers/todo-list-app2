import"/node_modules/core-js/modules/es.object.assign.js";import"/node_modules/core-js/modules/es.string.includes.js";import _toConsumableArray from"/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import React from"c:\\node_modules\\react\\index.js";import KeyCode from"/node_modules/rc-util/es/KeyCode.js";import useMemo from"/node_modules/rc-util/es/hooks/useMemo.js";import Tree from"/node_modules/rc-tree.js";import{SelectContext}from"/node_modules/rc-tree-select/es/Context.js";import useKeyValueMapping from"/node_modules/rc-tree-select/es/hooks/useKeyValueMapping.js";import useKeyValueMap from"/node_modules/rc-tree-select/es/hooks/useKeyValueMap.js";var HIDDEN_STYLE={width:0,height:0,display:"flex",overflow:"hidden",opacity:0,border:0,padding:0,margin:0},OptionList=function OptionList(props,ref){var prefixCls=props.prefixCls,height=props.height,itemHeight=props.itemHeight,virtual=props.virtual,options=props.options,flattenOptions=props.flattenOptions,multiple=props.multiple,searchValue=props.searchValue,onSelect=props.onSelect,onToggleOpen=props.onToggleOpen,open=props.open,notFoundContent=props.notFoundContent,onMouseEnter=props.onMouseEnter,_React$useContext=React.useContext(SelectContext),checkable=_React$useContext.checkable,checkedKeys=_React$useContext.checkedKeys,halfCheckedKeys=_React$useContext.halfCheckedKeys,treeExpandedKeys=_React$useContext.treeExpandedKeys,treeDefaultExpandAll=_React$useContext.treeDefaultExpandAll,treeDefaultExpandedKeys=_React$useContext.treeDefaultExpandedKeys,onTreeExpand=_React$useContext.onTreeExpand,treeIcon=_React$useContext.treeIcon,showTreeIcon=_React$useContext.showTreeIcon,switcherIcon=_React$useContext.switcherIcon,treeLine=_React$useContext.treeLine,treeNodeFilterProp=_React$useContext.treeNodeFilterProp,loadData=_React$useContext.loadData,treeLoadedKeys=_React$useContext.treeLoadedKeys,treeMotion=_React$useContext.treeMotion,onTreeLoad=_React$useContext.onTreeLoad,treeRef=React.useRef(),memoOptions=useMemo(function(){return options},[open,options],function(prev,next){return next[0]&&prev[1]!==next[1]}),_useKeyValueMap=useKeyValueMap(flattenOptions),_useKeyValueMap2=_slicedToArray(_useKeyValueMap,2),cacheKeyMap=_useKeyValueMap2[0],cacheValueMap=_useKeyValueMap2[1],_useKeyValueMapping=useKeyValueMapping(cacheKeyMap,cacheValueMap),_useKeyValueMapping2=_slicedToArray(_useKeyValueMapping,2),getEntityByKey=_useKeyValueMapping2[0],getEntityByValue=_useKeyValueMapping2[1],valueKeys=React.useMemo(function(){return checkedKeys.map(function(val){var entity=getEntityByValue(val);return entity?entity.key:null})},[checkedKeys]),mergedCheckedKeys=React.useMemo(function(){return checkable?{checked:valueKeys,halfChecked:halfCheckedKeys}:null},[valueKeys,halfCheckedKeys,checkable]);React.useEffect(function(){if(open&&!multiple&&valueKeys.length){var _treeRef$current;null===(_treeRef$current=treeRef.current)||void 0===_treeRef$current?void 0:_treeRef$current.scrollTo({key:valueKeys[0]})}},[open]);var lowerSearchValue=(searchValue+"").toLowerCase(),_React$useState=React.useState(treeDefaultExpandedKeys),_React$useState2=_slicedToArray(_React$useState,2),expandedKeys=_React$useState2[0],setExpandedKeys=_React$useState2[1],_React$useState3=React.useState(null),_React$useState4=_slicedToArray(_React$useState3,2),searchExpandedKeys=_React$useState4[0],setSearchExpandedKeys=_React$useState4[1],mergedExpandedKeys=React.useMemo(function(){return treeExpandedKeys?_toConsumableArray(treeExpandedKeys):searchValue?searchExpandedKeys:expandedKeys},[expandedKeys,searchExpandedKeys,lowerSearchValue,treeExpandedKeys]);React.useEffect(function(){searchValue&&setSearchExpandedKeys(flattenOptions.map(function(o){return o.key}))},[searchValue]);var onListMouseDown=function onListMouseDown(event){event.preventDefault()},onInternalSelect=function onInternalSelect(_,_ref){var key=_ref.node.key,entity=getEntityByKey(key,checkable?"checkbox":"select");null!==entity&&onSelect(entity.data.value,{selected:!checkedKeys.includes(entity.data.value)}),multiple||onToggleOpen(!1)},_React$useState5=React.useState(null),_React$useState6=_slicedToArray(_React$useState5,2),activeKey=_React$useState6[0],setActiveKey=_React$useState6[1],activeEntity=getEntityByKey(activeKey);if(React.useImperativeHandle(ref,function(){return{onKeyDown:function onKeyDown(event){var _treeRef$current2,which=event.which;switch(which){case KeyCode.UP:case KeyCode.DOWN:case KeyCode.LEFT:case KeyCode.RIGHT:null===(_treeRef$current2=treeRef.current)||void 0===_treeRef$current2?void 0:_treeRef$current2.onKeyDown(event);break;case KeyCode.ENTER:{null!==activeEntity&&onInternalSelect(null,{node:{key:activeKey},selected:!checkedKeys.includes(activeEntity.data.value)});break}case KeyCode.ESC:onToggleOpen(!1);}},onKeyUp:function onKeyUp(){}}}),0===memoOptions.length)return React.createElement("div",{role:"listbox",className:"".concat(prefixCls,"-empty"),onMouseDown:onListMouseDown},notFoundContent);var treeProps={};return treeLoadedKeys&&(treeProps.loadedKeys=treeLoadedKeys),mergedExpandedKeys&&(treeProps.expandedKeys=mergedExpandedKeys),React.createElement("div",{onMouseDown:onListMouseDown,onMouseEnter:onMouseEnter},activeEntity&&open&&React.createElement("span",{style:HIDDEN_STYLE,"aria-live":"assertive"},activeEntity.data.value),React.createElement(Tree,Object.assign({ref:treeRef,focusable:!1,prefixCls:"".concat(prefixCls,"-tree"),treeData:memoOptions,height:height,itemHeight:itemHeight,virtual:virtual,multiple:multiple,icon:treeIcon,showIcon:showTreeIcon,switcherIcon:switcherIcon,showLine:treeLine,loadData:searchValue?null:loadData,motion:treeMotion,checkable:checkable,checkStrictly:!0,checkedKeys:mergedCheckedKeys,selectedKeys:checkable?[]:valueKeys,defaultExpandAll:treeDefaultExpandAll},treeProps,{onActiveChange:setActiveKey,onSelect:onInternalSelect,onCheck:onInternalSelect,onExpand:function onInternalExpand(keys){setExpandedKeys(keys),setSearchExpandedKeys(keys),onTreeExpand&&onTreeExpand(keys)},onLoad:onTreeLoad,filterTreeNode:function filterTreeNode(treeNode){return!!lowerSearchValue&&(treeNode[treeNodeFilterProp]+"").toLowerCase().includes(lowerSearchValue)}})))},RefOptionList=React.forwardRef(OptionList);RefOptionList.displayName="OptionList";export default RefOptionList;