import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/esnext.set.add-all.js";import"/node_modules/core-js/modules/esnext.set.delete-all.js";import"/node_modules/core-js/modules/esnext.set.difference.js";import"/node_modules/core-js/modules/esnext.set.every.js";import"/node_modules/core-js/modules/esnext.set.filter.js";import"/node_modules/core-js/modules/esnext.set.find.js";import"/node_modules/core-js/modules/esnext.set.intersection.js";import"/node_modules/core-js/modules/esnext.set.is-disjoint-from.js";import"/node_modules/core-js/modules/esnext.set.is-subset-of.js";import"/node_modules/core-js/modules/esnext.set.is-superset-of.js";import"/node_modules/core-js/modules/esnext.set.join.js";import"/node_modules/core-js/modules/esnext.set.map.js";import"/node_modules/core-js/modules/esnext.set.reduce.js";import"/node_modules/core-js/modules/esnext.set.some.js";import"/node_modules/core-js/modules/esnext.set.symmetric-difference.js";import"/node_modules/core-js/modules/esnext.set.union.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";import _objectWithoutProperties from"/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import React from"c:\\node_modules\\react\\index.js";import warning from"/node_modules/rc-util/es/warning.js";import{convertChildrenToData}from"/node_modules/rc-tree-select/es/utils/legacyUtil.js";var MAX_WARNING_TIMES=10;function parseSimpleTreeData(treeData,_ref){var id=_ref.id,pId=_ref.pId,rootPId=_ref.rootPId,keyNodes={},rootNodeList=[],nodeList=treeData.map(function(node){var clone=_objectSpread({},node),key=clone[id];return keyNodes[key]=clone,clone.key=clone.key||key,clone});return nodeList.forEach(function(node){var parentKey=node[pId],parent=keyNodes[parentKey];parent&&(parent.children=parent.children||[],parent.children.push(node)),parentKey!==rootPId&&(parent||null!==rootPId)||rootNodeList.push(node)}),rootNodeList}function formatTreeData(treeData,getLabelProp){function dig(dataNodes){return(dataNodes||[]).map(function(node){var key=node.key,value=node.value,children=node.children,rest=_objectWithoutProperties(node,["key","value","children"]),mergedValue="value"in node?value:key,dataNode=_objectSpread(_objectSpread({},rest),{},{key:null!==key&&void 0!==key?key:mergedValue,value:mergedValue,title:getLabelProp(node)});return"children"in node&&(dataNode.children=dig(children)),dataNode})}return new Set,dig(treeData)}export default function useTreeData(treeData,children,_ref2){var getLabelProp=_ref2.getLabelProp,simpleMode=_ref2.simpleMode,cacheRef=React.useRef({});return treeData?(cacheRef.current.formatTreeData=cacheRef.current.treeData===treeData?cacheRef.current.formatTreeData:formatTreeData(simpleMode?parseSimpleTreeData(treeData,_objectSpread({id:"id",pId:"pId",rootPId:null},!0===simpleMode?{}:simpleMode)):treeData,getLabelProp),cacheRef.current.treeData=treeData):cacheRef.current.formatTreeData=cacheRef.current.children===children?cacheRef.current.formatTreeData:formatTreeData(convertChildrenToData(children),getLabelProp),cacheRef.current.formatTreeData}