import"/node_modules/core-js/modules/es.string.includes.js";import _objectSpread from"/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";import _slicedToArray from"/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";import React from"c:\\node_modules\\react\\index.js";import useMemo from"/node_modules/rc-util/es/hooks/useMemo.js";import TimeUnitColumn from"/node_modules/rc-picker/es/panels/TimePanel/TimeUnitColumn.js";import{leftPad}from"/node_modules/rc-picker/es/utils/miscUtil.js";import{setTime as utilSetTime}from"/node_modules/rc-picker/es/utils/timeUtil.js";function shouldUnitsUpdate(prevUnits,nextUnits){if(prevUnits.length!==nextUnits.length)return!0;for(var i=0;i<prevUnits.length;i+=1)if(prevUnits[i].disabled!==nextUnits[i].disabled)return!0;return!1}function generateUnits(start,end,step,disabledUnits){for(var units=[],i=start;i<=end;i+=step)units.push({label:leftPad(i,2),value:i,disabled:(disabledUnits||[]).includes(i)});return units}function TimeBody(props){function addColumnNode(condition,node,columnValue,units,onColumnSelect){!1!==condition&&columns.push({node:React.cloneElement(node,{prefixCls:columnPrefixCls,value:columnValue,active:activeColumnIndex===columns.length,onSelect:onColumnSelect,units:units,hideDisabledOptions:hideDisabledOptions}),onSelect:onColumnSelect,value:columnValue,units:units})}var isPM,generateConfig=props.generateConfig,prefixCls=props.prefixCls,operationRef=props.operationRef,activeColumnIndex=props.activeColumnIndex,value=props.value,showHour=props.showHour,showMinute=props.showMinute,showSecond=props.showSecond,use12Hours=props.use12Hours,_props$hourStep=props.hourStep,hourStep=void 0===_props$hourStep?1:_props$hourStep,_props$minuteStep=props.minuteStep,minuteStep=void 0===_props$minuteStep?1:_props$minuteStep,_props$secondStep=props.secondStep,secondStep=void 0===_props$secondStep?1:_props$secondStep,disabledHours=props.disabledHours,disabledMinutes=props.disabledMinutes,disabledSeconds=props.disabledSeconds,hideDisabledOptions=props.hideDisabledOptions,onSelect=props.onSelect,columns=[],contentPrefixCls="".concat(prefixCls,"-content"),columnPrefixCls="".concat(prefixCls,"-time-panel"),originHour=value?generateConfig.getHour(value):-1,hour=originHour,minute=value?generateConfig.getMinute(value):-1,second=value?generateConfig.getSecond(value):-1,setTime=function setTime(isNewPM,newHour,newMinute,newSecond){var newDate=value||generateConfig.getNow(),mergedHour=Math.max(0,newHour),mergedMinute=Math.max(0,newMinute),mergedSecond=Math.max(0,newSecond);return newDate=utilSetTime(generateConfig,newDate,use12Hours&&isNewPM?mergedHour+12:mergedHour,mergedMinute,mergedSecond),newDate},rawHours=generateUnits(0,23,hourStep,disabledHours&&disabledHours()),memorizedRawHours=useMemo(function(){return rawHours},rawHours,shouldUnitsUpdate);use12Hours&&(isPM=12<=hour,hour%=12);var _React$useMemo=React.useMemo(function(){if(!use12Hours)return[!1,!1];var AMPMDisabled=[!0,!0];return memorizedRawHours.forEach(function(_ref){var disabled=_ref.disabled,hourValue=_ref.value;disabled||(12<=hourValue?AMPMDisabled[1]=!1:AMPMDisabled[0]=!1)}),AMPMDisabled},[use12Hours,memorizedRawHours]),_React$useMemo2=_slicedToArray(_React$useMemo,2),AMDisabled=_React$useMemo2[0],PMDisabled=_React$useMemo2[1],hours=React.useMemo(function(){return use12Hours?memorizedRawHours.filter(isPM?function(hourMeta){return 12<=hourMeta.value}:function(hourMeta){return 12>hourMeta.value}).map(function(hourMeta){var hourValue=hourMeta.value%12,hourLabel=0===hourValue?"12":leftPad(hourValue,2);return _objectSpread(_objectSpread({},hourMeta),{},{label:hourLabel,value:hourValue})}):memorizedRawHours},[use12Hours,isPM,memorizedRawHours]),minutes=generateUnits(0,59,minuteStep,disabledMinutes&&disabledMinutes(originHour)),seconds=generateUnits(0,59,secondStep,disabledSeconds&&disabledSeconds(originHour,minute));operationRef.current={onUpDown:function onUpDown(diff){var column=columns[activeColumnIndex];if(column)for(var nextUnit,valueIndex=column.units.findIndex(function(unit){return unit.value===column.value}),unitLen=column.units.length,i=1;i<unitLen;i+=1)if(nextUnit=column.units[(valueIndex+diff*i+unitLen)%unitLen],!0!==nextUnit.disabled){column.onSelect(nextUnit.value);break}}},addColumnNode(showHour,React.createElement(TimeUnitColumn,{key:"hour"}),hour,hours,function(num){onSelect(setTime(isPM,num,minute,second),"mouse")}),addColumnNode(showMinute,React.createElement(TimeUnitColumn,{key:"minute"}),minute,minutes,function(num){onSelect(setTime(isPM,hour,num,second),"mouse")}),addColumnNode(showSecond,React.createElement(TimeUnitColumn,{key:"second"}),second,seconds,function(num){onSelect(setTime(isPM,hour,minute,num),"mouse")});var PMIndex=-1;return"boolean"==typeof isPM&&(PMIndex=isPM?1:0),addColumnNode(!0===use12Hours,React.createElement(TimeUnitColumn,{key:"12hours"}),PMIndex,[{label:"AM",value:0,disabled:AMDisabled},{label:"PM",value:1,disabled:PMDisabled}],function(num){onSelect(setTime(!!num,hour,minute,second),"mouse")}),React.createElement("div",{className:contentPrefixCls},columns.map(function(_ref2){var node=_ref2.node;return node}))}export default TimeBody;